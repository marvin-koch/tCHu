Index: test/ch/epfl/sigcheck/SignatureChecks_11.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.epfl.sigcheck;\r\n\r\n// Attention : cette classe n'est *pas* un test JUnit, et son code n'est\r\n// pas destiné à être exécuté. Son seul but est de vérifier, autant que\r\n// possible, que les noms et les types des différentes entités à définir\r\n// pour cette étape du projet sont corrects.\r\n\r\nfinal class SignatureChecks_11 {\r\n    private SignatureChecks_11() {}\r\n\r\n    void checkClientMain() {\r\n        v01 = new ch.epfl.tchu.gui.ClientMain();\r\n        ch.epfl.tchu.gui.ClientMain.main(v02);\r\n        v01.start(v03);\r\n    }\r\n\r\n    void checkServerMain() {\r\n        v04 = new ch.epfl.tchu.gui.ServerMain();\r\n        ch.epfl.tchu.gui.ServerMain.main(v02);\r\n        v04.start(v03);\r\n    }\r\n\r\n    ch.epfl.tchu.gui.ClientMain v01;\r\n    java.lang.String[] v02;\r\n    javafx.stage.Stage v03;\r\n    ch.epfl.tchu.gui.ServerMain v04;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/ch/epfl/sigcheck/SignatureChecks_11.java b/test/ch/epfl/sigcheck/SignatureChecks_11.java
--- a/test/ch/epfl/sigcheck/SignatureChecks_11.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ b/test/ch/epfl/sigcheck/SignatureChecks_11.java	(date 1621260806899)
@@ -17,7 +17,7 @@
     void checkServerMain() {
         v04 = new ch.epfl.tchu.gui.ServerMain();
         ch.epfl.tchu.gui.ServerMain.main(v02);
-        v04.start(v03);
+        //v04.start(v03);
     }
 
     ch.epfl.tchu.gui.ClientMain v01;
Index: .idea/codeStyles/codeStyleConfig.xml
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
deleted file mode 100644
--- a/.idea/codeStyles/codeStyleConfig.xml	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,5 +0,0 @@
-<component name="ProjectCodeStyleConfiguration">
-  <state>
-    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
-  </state>
-</component>
\ No newline at end of file
Index: testProf/ch/epfl/tchu/game/TicketTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/TicketTestProf.java b/testProf/ch/epfl/tchu/game/TicketTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/TicketTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,151 +0,0 @@
-package ch.epfl.tchu.game;
-
-import org.junit.jupiter.api.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class TicketTestProf {
-    @Test
-    void constructorFailsWithNoTrips() {
-        assertThrows(IllegalArgumentException.class, () -> {
-            new Ticket(List.of());
-        });
-    }
-
-    @Test
-    void textIsCorrectForSimpleTicket() {
-        var s1 = new Station(0, "From");
-        var s2 = new Station(1, "To");
-        var t = new Ticket(s1, s2, 1);
-        assertEquals("From - To (1)", t.text());
-    }
-
-    @Test
-    void textIsCorrectForSingleTripTicket() {
-        var s1 = new Station(0, "From");
-        var s2 = new Station(1, "To");
-        var t = new Ticket(List.of(new Trip(s1, s2, 15)));
-        assertEquals("From - To (15)", t.text());
-    }
-
-    @Test
-    void textIsCorrectForMultipleTripTicket() {
-        var map = new TestMap();
-        assertEquals(
-                "Berne - {Allemagne (6), Autriche (11), France (5), Italie (8)}",
-                map.BER_NEIGHBORS.text());
-        assertEquals(
-                "France - {Allemagne (5), Autriche (14), Italie (11)}",
-                map.FR_NEIGHBORS.text());
-    }
-
-    @Test
-    void pointsAreCorrectWithNoConnectivity() {
-        var map = new TestMap();
-        var connectivity = new TestConnectivity(List.of(), List.of());
-        assertEquals(-13, map.LAU_STG.points(connectivity));
-        assertEquals(-5, map.BER_NEIGHBORS.points(connectivity));
-        assertEquals(-5, map.FR_NEIGHBORS.points(connectivity));
-    }
-
-    @Test
-    void pointsAreCorrectWithFullConnectivity() {
-        var map = new TestMap();
-        var connectivity = new FullConnectivity();
-        assertEquals(+13, map.LAU_STG.points(connectivity));
-        assertEquals(+11, map.BER_NEIGHBORS.points(connectivity));
-        assertEquals(+14, map.FR_NEIGHBORS.points(connectivity));
-    }
-
-    @Test
-    void pointsAreCorrectWithPartialConnectivity() {
-        var map = new TestMap();
-        var connectivity = new TestConnectivity(
-                List.of(map.LAU, map.BER, map.BER, map.FR1, map.FR2, map.FR2),
-                List.of(map.BER, map.FR2, map.DE3, map.IT1, map.IT2, map.DE1));
-        assertEquals(-13, map.LAU_STG.points(connectivity));
-        assertEquals(+6, map.BER_NEIGHBORS.points(connectivity));
-        assertEquals(+11, map.FR_NEIGHBORS.points(connectivity));
-    }
-
-    @Test
-    void compareToWorksOnKnownTickets() {
-        var map = new TestMap();
-        assertTrue(map.LAU_BER.compareTo(map.LAU_STG) < 0);
-        assertTrue(map.LAU_BER.compareTo(map.FR_NEIGHBORS) > 0);
-        //noinspection EqualsWithItself
-        assertEquals(0, map.LAU_BER.compareTo(map.LAU_BER));
-    }
-
-    private static final class FullConnectivity implements StationConnectivity {
-        @Override
-        public boolean connected(Station s1, Station s2) {
-            return true;
-        }
-    }
-
-    private static final class TestConnectivity implements StationConnectivity {
-        private final List<Station> stations1;
-        private final List<Station> stations2;
-
-        public TestConnectivity(List<Station> stations1, List<Station> stations2) {
-            assert stations1.size() == stations2.size();
-            this.stations1 = List.copyOf(stations1);
-            this.stations2 = List.copyOf(stations2);
-        }
-
-        @Override
-        public boolean connected(Station s1, Station s2) {
-            for (int i = 0; i < stations1.size(); i++) {
-                var t1 = stations1.get(i);
-                var t2 = stations2.get(i);
-
-                if (t1.equals(s1) && t2.equals(s2) || t1.equals(s2) && t2.equals(s1))
-                    return true;
-            }
-            return false;
-        }
-    }
-
-    private static final class TestMap {
-        // Stations - cities
-        public final Station BER = new Station(0, "Berne");
-        public final Station LAU = new Station(1, "Lausanne");
-        public final Station STG = new Station(2, "Saint-Gall");
-
-        // Stations - countries
-        public final Station DE1 = new Station(3, "Allemagne");
-        public final Station DE2 = new Station(4, "Allemagne");
-        public final Station DE3 = new Station(5, "Allemagne");
-        public final Station AT1 = new Station(6, "Autriche");
-        public final Station AT2 = new Station(7, "Autriche");
-        public final Station IT1 = new Station(8, "Italie");
-        public final Station IT2 = new Station(9, "Italie");
-        public final Station IT3 = new Station(10, "Italie");
-        public final Station FR1 = new Station(11, "France");
-        public final Station FR2 = new Station(12, "France");
-
-        // Countries
-        public final List<Station> DE = List.of(DE1, DE2, DE3);
-        public final List<Station> AT = List.of(AT1, AT2);
-        public final List<Station> IT = List.of(IT1, IT2, IT3);
-        public final List<Station> FR = List.of(FR1, FR2);
-
-        public final Ticket LAU_STG = new Ticket(LAU, STG, 13);
-        public final Ticket LAU_BER = new Ticket(LAU, BER, 2);
-        public final Ticket BER_NEIGHBORS = ticketToNeighbors(List.of(BER), 6, 11, 8, 5);
-        public final Ticket FR_NEIGHBORS = ticketToNeighbors(FR, 5, 14, 11, 0);
-
-        private Ticket ticketToNeighbors(List<Station> from, int de, int at, int it, int fr) {
-            var trips = new ArrayList<Trip>();
-            if (de != 0) trips.addAll(Trip.all(from, DE, de));
-            if (at != 0) trips.addAll(Trip.all(from, AT, at));
-            if (it != 0) trips.addAll(Trip.all(from, IT, it));
-            if (fr != 0) trips.addAll(Trip.all(from, FR, fr));
-            return new Ticket(trips);
-        }
-    }
-}
\ No newline at end of file
Index: testProf/ch/epfl/tchu/game/CardStateTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/CardStateTestProf.java b/testProf/ch/epfl/tchu/game/CardStateTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/CardStateTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,205 +0,0 @@
-package ch.epfl.tchu.game;
-
-import ch.epfl.tchu.SortedBag;
-import ch.epfl.test.TestRandomizer;
-import org.junit.jupiter.api.Test;
-
-import java.util.*;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-public final class CardStateTestProf {
-    private static final List<Card> ALL_CARDS = List.of(Card.values());
-    private static final int FACE_UP_CARDS_COUNT = 5;
-
-    @Test
-    void cardStateOfFailsIfDeckIsTooSmall() {
-        for (int i = 0; i < FACE_UP_CARDS_COUNT; i++) {
-            var deck = Deck.of(SortedBag.of(i, Card.RED), new Random(i));
-            assertThrows(IllegalArgumentException.class, () -> {
-                CardState.of(deck);
-            });
-        }
-    }
-
-    @Test
-    void cardStateOfCorrectlyDrawsFaceUpCards() {
-        var cards = allCards();
-
-        for (int i = 0; i < 10; i++) {
-            var deck = Deck.of(cards, new Random(i));
-
-            var top5 = new ArrayList<Card>();
-            var deck1 = deck;
-            for (int j = 0; j < 5; j++) {
-                top5.add(deck1.topCard());
-                deck1 = deck1.withoutTopCard();
-            }
-
-            var cardState = CardState.of(deck);
-            var faceUpCards = new ArrayList<>(cardState.faceUpCards());
-
-            // Sort the cards, as the assignment was not explicit about preserving order
-            Collections.sort(top5);
-            Collections.sort(faceUpCards);
-
-            assertEquals(top5, faceUpCards);
-            assertEquals(deck.size() - 5, cardState.deckSize());
-            assertEquals(0, cardState.discardsSize());
-        }
-    }
-
-    @Test
-    void cardStateWithDrawnFaceUpCardCorrectlyReplacesIt() {
-        var cards = allCards();
-
-        for (int i = 0; i < 10; i++) {
-            var deck = Deck.of(cards, new Random(-i));
-
-            var deck1 = deck.withoutTopCards(5);
-            var next5 = new ArrayList<Card>();
-            for (int j = 0; j < 5; j++) {
-                next5.add(deck1.topCard());
-                deck1 = deck1.withoutTopCard();
-            }
-
-            var cardState = CardState.of(deck);
-            var next5It = next5.iterator();
-            var slots = new ArrayList<>(List.of(0, 1, 2, 3, 4));
-            Collections.shuffle(slots, new Random(i * i));
-            for (int slot : slots) {
-                cardState = cardState.withDrawnFaceUpCard(slot);
-                assertEquals(next5It.next(), cardState.faceUpCard(slot));
-            }
-        }
-    }
-
-    @Test
-    void cardStateTopDeckCardFailsWithEmptyDeck() {
-        var cardState = CardState.of(Deck.of(SortedBag.of(5, Card.ORANGE), TestRandomizer.newRandom()));
-        assertThrows(IllegalArgumentException.class, () -> {
-            cardState.topDeckCard();
-        });
-    }
-
-    @Test
-    void cardStateTopDeckCardReturnsTopDeckCard() {
-        var cards = allCards();
-        for (int i = 0; i < 10; i++) {
-            var deck = Deck.of(cards, new Random((i + 35) * 7));
-            var topDeckCard = deck.withoutTopCards(5).topCard();
-            var cardState = CardState.of(deck);
-            assertEquals(topDeckCard, cardState.topDeckCard());
-        }
-    }
-
-    @Test
-    void cardStateWithoutTopDeckCardFailsWithEmptyDeck() {
-        var cardState = CardState.of(Deck.of(SortedBag.of(5, Card.ORANGE), TestRandomizer.newRandom()));
-        assertThrows(IllegalArgumentException.class, () -> {
-            cardState.withoutTopDeckCard();
-        });
-    }
-
-    @Test
-    void cardStateWithoutTopDeckCardWorks() {
-        var cards = allCards();
-
-        for (int i = 0; i < 10; i++) {
-            var deck = Deck.of(cards, new Random(2021 - i));
-
-            var expectedCards = new ArrayList<Card>();
-            var deck1 = deck.withoutTopCards(5);
-            while (!deck1.isEmpty()) {
-                expectedCards.add(deck1.topCard());
-                deck1 = deck1.withoutTopCard();
-            }
-
-            var actualCards = new ArrayList<Card>();
-            var cardState = CardState.of(deck);
-            while (!cardState.isDeckEmpty()) {
-                actualCards.add(cardState.topDeckCard());
-                cardState = cardState.withoutTopDeckCard();
-            }
-
-            assertEquals(expectedCards, actualCards);
-        }
-    }
-
-    @Test
-    void cardStateWithDeckRecreatedFromDiscardsFailsWhenDeckIsNotEmpty() {
-        var deck = Deck.of(SortedBag.of(6, Card.RED), TestRandomizer.newRandom());
-        var cardState = CardState.of(deck);
-        assertThrows(IllegalArgumentException.class, () -> {
-            cardState.withDeckRecreatedFromDiscards(TestRandomizer.newRandom());
-        });
-    }
-
-    @Test
-    void cardStateWithDeckRecreatedFromDiscardsWorksWithEmptyDiscards() {
-        var deck = Deck.of(
-                SortedBag.of(FACE_UP_CARDS_COUNT, Card.RED),
-                TestRandomizer.newRandom());
-        var cardState = CardState.of(deck);
-        var cardState1 = cardState.withDeckRecreatedFromDiscards(TestRandomizer.newRandom());
-        assertEquals(0, cardState1.deckSize());
-        assertEquals(0, cardState1.discardsSize());
-    }
-
-    @Test
-    void cardStateWithDeckRecreatedFromDiscardsWorksWithNonEmptyDiscards() {
-        var deck = Deck.of(
-                SortedBag.of(FACE_UP_CARDS_COUNT, Card.RED),
-                TestRandomizer.newRandom());
-        var discardsCount = 10;
-        var discards = SortedBag.of(discardsCount, Card.BLUE);
-        var cardState = CardState.of(deck)
-                .withMoreDiscardedCards(discards)
-                .withDeckRecreatedFromDiscards(TestRandomizer.newRandom());
-        assertEquals(discardsCount, cardState.deckSize());
-        var deckCards = new SortedBag.Builder<Card>();
-        for (int i = 0; i < discardsCount; i++) {
-            var topDeckCard = cardState.topDeckCard();
-            cardState = cardState.withoutTopDeckCard();
-            deckCards.add(topDeckCard);
-        }
-        assertTrue(cardState.isDeckEmpty());
-        assertEquals(discards, deckCards.build());
-    }
-
-    @Test
-    void cardStateWithMoreDiscardedCardsWorks() {
-        var rng = TestRandomizer.newRandom();
-        var deck = Deck.of(
-                SortedBag.of(FACE_UP_CARDS_COUNT, Card.RED),
-                TestRandomizer.newRandom());
-        var expectedDeckBuilder = new SortedBag.Builder<Card>();
-        var cardState = CardState.of(deck);
-        for (Card card : ALL_CARDS) {
-            var count = rng.nextInt(12);
-            var discards = SortedBag.of(count, card);
-            cardState = cardState.withMoreDiscardedCards(discards);
-            expectedDeckBuilder.add(count, card);
-        }
-        cardState = cardState.withDeckRecreatedFromDiscards(new Random(rng.nextLong()));
-        var expectedDeck = expectedDeckBuilder.build();
-
-        var actualDeck = new SortedBag.Builder<Card>();
-        for (int i = 0; i < expectedDeck.size(); i++) {
-            var topDeckCard = cardState.topDeckCard();
-            cardState = cardState.withoutTopDeckCard();
-            actualDeck.add(topDeckCard);
-        }
-        assertTrue(cardState.isDeckEmpty());
-        assertEquals(expectedDeck, actualDeck.build());
-    }
-
-    private SortedBag<Card> allCards() {
-        var cardsBuilder = new SortedBag.Builder<Card>();
-        cardsBuilder.add(14, Card.LOCOMOTIVE);
-        for (Card card : Card.CARS)
-            cardsBuilder.add(12, card);
-        var cards = cardsBuilder.build();
-        return cards;
-    }
-}
Index: testProf/ch/epfl/tchu/game/StationPartitionTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/StationPartitionTestProf.java b/testProf/ch/epfl/tchu/game/StationPartitionTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/StationPartitionTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,416 +0,0 @@
-package ch.epfl.tchu.game;
-
-import ch.epfl.test.TestRandomizer;
-import org.junit.jupiter.api.Test;
-
-import java.util.*;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class StationPartitionTestProf {
-    @Test
-    void stationPartitionInitiallyConnectsStationsWithThemselvesOnly() {
-        var stations = new ChMap().ALL_STATIONS;
-
-        var partition = new StationPartition.Builder(stations.size())
-                .build();
-        for (var s1 : stations) {
-            for (var s2 : stations) {
-                var same = s1.equals(s2);
-                assertEquals(same, partition.connected(s1, s2));
-            }
-        }
-    }
-
-    @Test
-    void stationPartitionBuilderConnectIsIdempotent() {
-        var stations = new ChMap().ALL_STATIONS;
-        var s0 = stations.get(0);
-        var s1 = stations.get(1);
-        var partition = new StationPartition.Builder(stations.size())
-                .connect(s0, s0)
-                .connect(s1, s1)
-                .connect(s0, s1)
-                .connect(s1, s0)
-                .build();
-
-        assertTrue(partition.connected(s0, s0));
-        assertTrue(partition.connected(s1, s1));
-        assertTrue(partition.connected(s1, s0));
-        assertTrue(partition.connected(s0, s1));
-    }
-
-    @Test
-    void stationPartitionWorksOnGivenExample() {
-        var stations = reducedChStations();
-        var partition = new StationPartition.Builder(stations.size())
-                .connect(stations.get(5), stations.get(2))  // Lausanne - Fribourg
-                .connect(stations.get(0), stations.get(3))  // Berne - Interlaken
-                .connect(stations.get(0), stations.get(2))  // Berne - Fribourg
-                .connect(stations.get(7), stations.get(10)) // Neuchâtel - Soleure
-                .connect(stations.get(10), stations.get(8)) // Soleure - Olten
-                .connect(stations.get(6), stations.get(13)) // Lucerne - Zoug
-                .connect(stations.get(13), stations.get(9)) // Zoug - Schwyz
-                .connect(stations.get(9), stations.get(6))  // Schwyz - Lucerne
-                .connect(stations.get(9), stations.get(11)) // Schwyz - Wassen
-                .build();
-
-        assertTrue(partition.connected(stations.get(5), stations.get(3)));   // Lausanne - Interlaken
-        assertTrue(partition.connected(stations.get(6), stations.get(11)));  // Lucerne - Wassen
-        assertTrue(partition.connected(stations.get(13), stations.get(11))); // Zoug - Wassen
-        assertTrue(partition.connected(stations.get(9), stations.get(11)));  // Schwyz - Wassen
-
-        assertFalse(partition.connected(stations.get(0), stations.get(6)));  // Berne - Lucerne
-    }
-
-    @Test
-    void stationPartitionWorksOnKnownExample1() {
-        var chMap = new ChMap();
-
-        var routes = Arrays.asList(
-                chMap.BRI_LOC_1, chMap.BRI_SIO_1, chMap.MAR_SIO_1, chMap.LAU_MAR_1,
-                chMap.GEN_LAU_1, chMap.GEN_YVE_1, chMap.LCF_YVE_1, chMap.DEL_LCF_1,
-                chMap.DEL_SOL_1, chMap.OLT_SOL_1, chMap.BAL_OLT_1, chMap.BER_LUC_1,
-                chMap.SCE_WIN_1);
-        var maxId = routes.stream()
-                .flatMap(r -> r.stations().stream())
-                .mapToInt(Station::id)
-                .max()
-                .orElse(0);
-
-        Random rng = TestRandomizer.newRandom();
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            Collections.shuffle(routes, rng);
-            var pb = new StationPartition.Builder(maxId + 1);
-            routes.forEach(r -> pb.connect(r.station1(), r.station2()));
-            var p = pb.build();
-
-            assertTrue(p.connected(chMap.LOC, chMap.BAL));
-            assertTrue(p.connected(chMap.BER, chMap.LUC));
-            assertFalse(p.connected(chMap.BER, chMap.SOL));
-            assertFalse(p.connected(chMap.LAU, chMap.LUC));
-            assertFalse(p.connected(chMap.ZUR, chMap.KRE));
-            assertTrue(p.connected(chMap.ZUR, chMap.ZUR));
-        }
-    }
-
-    @Test
-    void stationPartitionWorksOnKnownExample2() {
-        var chMap = new ChMap();
-
-        var routes = Arrays.asList(
-                chMap.DE2_SCE_1, chMap.SCE_WIN_2, chMap.WIN_ZUR_1, chMap.ZOU_ZUR_1,
-                chMap.SCZ_ZOU_1, chMap.SCZ_WAS_1, chMap.BEL_WAS_1, chMap.BEL_LUG_1,
-                chMap.COI_WAS_1, chMap.COI_SAR_1, chMap.SAR_VAD_1, chMap.AT2_VAD_1,
-                chMap.BRU_COI_1, chMap.BRU_IT2_1);
-        var maxId = routes.stream()
-                .flatMap(r -> r.stations().stream())
-                .mapToInt(Station::id)
-                .max()
-                .orElse(0);
-
-        Random rng = TestRandomizer.newRandom();
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            Collections.shuffle(routes, rng);
-            var pb = new StationPartition.Builder(maxId + 1);
-            routes.forEach(r -> pb.connect(r.station1(), r.station2()));
-            var p = pb.build();
-
-            assertTrue(p.connected(chMap.LUG, chMap.DE2));
-            assertTrue(p.connected(chMap.AT2, chMap.IT2));
-            assertFalse(p.connected(chMap.ZUR, chMap.AT1));
-            assertFalse(p.connected(chMap.ZUR, chMap.AT1));
-        }
-    }
-
-    @Test
-    void stationPartitionWorksOnKnownExample3() {
-        var chMap = new ChMap();
-
-        var routes = Arrays.asList(
-                chMap.DE4_KRE_1, chMap.KRE_WIN_1, chMap.WIN_ZUR_2, chMap.BAD_ZUR_1,
-                chMap.ZOU_ZUR_2, chMap.LUC_ZOU_2, chMap.INT_LUC_1, chMap.BRI_INT_1,
-                chMap.BER_INT_1, chMap.BER_FRI_1, chMap.BER_NEU_1, chMap.LCF_NEU_1,
-                chMap.FR3_LCF_1, chMap.BER_SOL_1, chMap.BAL_DEL_1, chMap.BAL_DE1_1);
-        var maxId = routes.stream()
-                .flatMap(r -> r.stations().stream())
-                .mapToInt(Station::id)
-                .max()
-                .orElse(0);
-
-        Random rng = TestRandomizer.newRandom();
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            Collections.shuffle(routes, rng);
-            var pb = new StationPartition.Builder(maxId + 1);
-            routes.forEach(r -> pb.connect(r.station1(), r.station2()));
-            var p = pb.build();
-
-            assertTrue(p.connected(chMap.BRI, chMap.FR3));
-            assertTrue(p.connected(chMap.DE4, chMap.FR3));
-            assertTrue(p.connected(chMap.BRI, chMap.DE4));
-            assertTrue(p.connected(chMap.BAD, chMap.SOL));
-            assertTrue(p.connected(chMap.BAL, chMap.DE1));
-            assertFalse(p.connected(chMap.BAL, chMap.SOL));
-        }
-    }
-
-    private static List<Station> reducedChStations() {
-        return List.of(
-                new Station(0, "Berne"),
-                new Station(1, "Delémont"),
-                new Station(2, "Fribourg"),
-                new Station(3, "Interlaken"),
-                new Station(4, "La Chaux-de-Fonds"),
-                new Station(5, "Lausanne"),
-                new Station(6, "Lucerne"),
-                new Station(7, "Neuchâtel"),
-                new Station(8, "Olten"),
-                new Station(9, "Schwyz"),
-                new Station(10, "Soleure"),
-                new Station(11, "Wassen"),
-                new Station(12, "Yverdon"),
-                new Station(13, "Zoug"),
-                new Station(14, "Zürich"));
-
-    }
-
-    private static final class ChMap {
-        //region Stations
-        final Station BAD = new Station(0, "Baden");
-        final Station BAL = new Station(1, "Bâle");
-        final Station BEL = new Station(2, "Bellinzone");
-        final Station BER = new Station(3, "Berne");
-        final Station BRI = new Station(4, "Brigue");
-        final Station BRU = new Station(5, "Brusio");
-        final Station COI = new Station(6, "Coire");
-        final Station DAV = new Station(7, "Davos");
-        final Station DEL = new Station(8, "Delémont");
-        final Station FRI = new Station(9, "Fribourg");
-        final Station GEN = new Station(10, "Genève");
-        final Station INT = new Station(11, "Interlaken");
-        final Station KRE = new Station(12, "Kreuzlingen");
-        final Station LAU = new Station(13, "Lausanne");
-        final Station LCF = new Station(14, "La Chaux-de-Fonds");
-        final Station LOC = new Station(15, "Locarno");
-        final Station LUC = new Station(16, "Lucerne");
-        final Station LUG = new Station(17, "Lugano");
-        final Station MAR = new Station(18, "Martigny");
-        final Station NEU = new Station(19, "Neuchâtel");
-        final Station OLT = new Station(20, "Olten");
-        final Station PFA = new Station(21, "Pfäffikon");
-        final Station SAR = new Station(22, "Sargans");
-        final Station SCE = new Station(23, "Schaffhouse");
-        final Station SCZ = new Station(24, "Schwyz");
-        final Station SIO = new Station(25, "Sion");
-        final Station SOL = new Station(26, "Soleure");
-        final Station STG = new Station(27, "Saint-Gall");
-        final Station VAD = new Station(28, "Vaduz");
-        final Station WAS = new Station(29, "Wassen");
-        final Station WIN = new Station(30, "Winterthour");
-        final Station YVE = new Station(31, "Yverdon");
-        final Station ZOU = new Station(32, "Zoug");
-        final Station ZUR = new Station(33, "Zürich");
-
-        final Station DE1 = new Station(34, "Allemagne");
-        final Station DE2 = new Station(35, "Allemagne");
-        final Station DE3 = new Station(36, "Allemagne");
-        final Station DE4 = new Station(37, "Allemagne");
-        final Station DE5 = new Station(38, "Allemagne");
-        final Station AT1 = new Station(39, "Autriche");
-        final Station AT2 = new Station(40, "Autriche");
-        final Station AT3 = new Station(41, "Autriche");
-        final Station IT1 = new Station(42, "Italie");
-        final Station IT2 = new Station(43, "Italie");
-        final Station IT3 = new Station(44, "Italie");
-        final Station IT4 = new Station(45, "Italie");
-        final Station IT5 = new Station(46, "Italie");
-        final Station FR1 = new Station(47, "France");
-        final Station FR2 = new Station(48, "France");
-        final Station FR3 = new Station(49, "France");
-        final Station FR4 = new Station(50, "France");
-
-        final List<Station> DE = List.of(DE1, DE2, DE3, DE4, DE5);
-        final List<Station> AT = List.of(AT1, AT2, AT3);
-        final List<Station> IT = List.of(IT1, IT2, IT3, IT4, IT5);
-        final List<Station> FR = List.of(FR1, FR2, FR3, FR4);
-
-        final List<Station> ALL_STATIONS = List.of(
-                BAD, BAL, BEL, BER, BRI, BRU, COI, DAV, DEL, FRI, GEN, INT, KRE, LAU, LCF, LOC, LUC,
-                LUG, MAR, NEU, OLT, PFA, SAR, SCE, SCZ, SIO, SOL, STG, VAD, WAS, WIN, YVE, ZOU, ZUR,
-                DE1, DE2, DE3, DE4, DE5, AT1, AT2, AT3, IT1, IT2, IT3, IT4, IT5, FR1, FR2, FR3, FR4);
-        //endregion
-
-        //region Routes
-        final Route AT1_STG_1 = new Route("AT1_STG_1", AT1, STG, 4, Route.Level.UNDERGROUND, null);
-        final Route AT2_VAD_1 = new Route("AT2_VAD_1", AT2, VAD, 1, Route.Level.UNDERGROUND, Color.RED);
-        final Route BAD_BAL_1 = new Route("BAD_BAL_1", BAD, BAL, 3, Route.Level.UNDERGROUND, Color.RED);
-        final Route BAD_OLT_1 = new Route("BAD_OLT_1", BAD, OLT, 2, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route BAD_ZUR_1 = new Route("BAD_ZUR_1", BAD, ZUR, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route BAL_DE1_1 = new Route("BAL_DE1_1", BAL, DE1, 1, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route BAL_DEL_1 = new Route("BAL_DEL_1", BAL, DEL, 2, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route BAL_OLT_1 = new Route("BAL_OLT_1", BAL, OLT, 2, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route BEL_LOC_1 = new Route("BEL_LOC_1", BEL, LOC, 1, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route BEL_LUG_1 = new Route("BEL_LUG_1", BEL, LUG, 1, Route.Level.UNDERGROUND, Color.RED);
-        final Route BEL_LUG_2 = new Route("BEL_LUG_2", BEL, LUG, 1, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route BEL_WAS_1 = new Route("BEL_WAS_1", BEL, WAS, 4, Route.Level.UNDERGROUND, null);
-        final Route BEL_WAS_2 = new Route("BEL_WAS_2", BEL, WAS, 4, Route.Level.UNDERGROUND, null);
-        final Route BER_FRI_1 = new Route("BER_FRI_1", BER, FRI, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route BER_FRI_2 = new Route("BER_FRI_2", BER, FRI, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route BER_INT_1 = new Route("BER_INT_1", BER, INT, 3, Route.Level.OVERGROUND, Color.BLUE);
-        final Route BER_LUC_1 = new Route("BER_LUC_1", BER, LUC, 4, Route.Level.OVERGROUND, null);
-        final Route BER_LUC_2 = new Route("BER_LUC_2", BER, LUC, 4, Route.Level.OVERGROUND, null);
-        final Route BER_NEU_1 = new Route("BER_NEU_1", BER, NEU, 2, Route.Level.OVERGROUND, Color.RED);
-        final Route BER_SOL_1 = new Route("BER_SOL_1", BER, SOL, 2, Route.Level.OVERGROUND, Color.BLACK);
-        final Route BRI_INT_1 = new Route("BRI_INT_1", BRI, INT, 2, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route BRI_IT5_1 = new Route("BRI_IT5_1", BRI, IT5, 3, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route BRI_LOC_1 = new Route("BRI_LOC_1", BRI, LOC, 6, Route.Level.UNDERGROUND, null);
-        final Route BRI_SIO_1 = new Route("BRI_SIO_1", BRI, SIO, 3, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route BRI_WAS_1 = new Route("BRI_WAS_1", BRI, WAS, 4, Route.Level.UNDERGROUND, Color.RED);
-        final Route BRU_COI_1 = new Route("BRU_COI_1", BRU, COI, 5, Route.Level.UNDERGROUND, null);
-        final Route BRU_DAV_1 = new Route("BRU_DAV_1", BRU, DAV, 4, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route BRU_IT2_1 = new Route("BRU_IT2_1", BRU, IT2, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route COI_DAV_1 = new Route("COI_DAV_1", COI, DAV, 2, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route COI_SAR_1 = new Route("COI_SAR_1", COI, SAR, 1, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route COI_WAS_1 = new Route("COI_WAS_1", COI, WAS, 5, Route.Level.UNDERGROUND, null);
-        final Route DAV_AT3_1 = new Route("DAV_AT3_1", DAV, AT3, 3, Route.Level.UNDERGROUND, null);
-        final Route DAV_IT1_1 = new Route("DAV_IT1_1", DAV, IT1, 3, Route.Level.UNDERGROUND, null);
-        final Route DAV_SAR_1 = new Route("DAV_SAR_1", DAV, SAR, 3, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route DE2_SCE_1 = new Route("DE2_SCE_1", DE2, SCE, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route DE3_KRE_1 = new Route("DE3_KRE_1", DE3, KRE, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route DE4_KRE_1 = new Route("DE4_KRE_1", DE4, KRE, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route DE5_STG_1 = new Route("DE5_STG_1", DE5, STG, 2, Route.Level.OVERGROUND, null);
-        final Route DEL_FR4_1 = new Route("DEL_FR4_1", DEL, FR4, 2, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route DEL_LCF_1 = new Route("DEL_LCF_1", DEL, LCF, 3, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route DEL_SOL_1 = new Route("DEL_SOL_1", DEL, SOL, 1, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route FR1_MAR_1 = new Route("FR1_MAR_1", FR1, MAR, 2, Route.Level.UNDERGROUND, null);
-        final Route FR2_GEN_1 = new Route("FR2_GEN_1", FR2, GEN, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route FR3_LCF_1 = new Route("FR3_LCF_1", FR3, LCF, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route FRI_LAU_1 = new Route("FRI_LAU_1", FRI, LAU, 3, Route.Level.OVERGROUND, Color.RED);
-        final Route FRI_LAU_2 = new Route("FRI_LAU_2", FRI, LAU, 3, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route GEN_LAU_1 = new Route("GEN_LAU_1", GEN, LAU, 4, Route.Level.OVERGROUND, Color.BLUE);
-        final Route GEN_LAU_2 = new Route("GEN_LAU_2", GEN, LAU, 4, Route.Level.OVERGROUND, Color.WHITE);
-        final Route GEN_YVE_1 = new Route("GEN_YVE_1", GEN, YVE, 6, Route.Level.OVERGROUND, null);
-        final Route INT_LUC_1 = new Route("INT_LUC_1", INT, LUC, 4, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route IT3_LUG_1 = new Route("IT3_LUG_1", IT3, LUG, 2, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route IT4_LOC_1 = new Route("IT4_LOC_1", IT4, LOC, 2, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route KRE_SCE_1 = new Route("KRE_SCE_1", KRE, SCE, 3, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route KRE_STG_1 = new Route("KRE_STG_1", KRE, STG, 1, Route.Level.OVERGROUND, Color.GREEN);
-        final Route KRE_WIN_1 = new Route("KRE_WIN_1", KRE, WIN, 2, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route LAU_MAR_1 = new Route("LAU_MAR_1", LAU, MAR, 4, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route LAU_NEU_1 = new Route("LAU_NEU_1", LAU, NEU, 4, Route.Level.OVERGROUND, null);
-        final Route LCF_NEU_1 = new Route("LCF_NEU_1", LCF, NEU, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route LCF_YVE_1 = new Route("LCF_YVE_1", LCF, YVE, 3, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route LOC_LUG_1 = new Route("LOC_LUG_1", LOC, LUG, 1, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route LUC_OLT_1 = new Route("LUC_OLT_1", LUC, OLT, 3, Route.Level.OVERGROUND, Color.GREEN);
-        final Route LUC_SCZ_1 = new Route("LUC_SCZ_1", LUC, SCZ, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route LUC_ZOU_1 = new Route("LUC_ZOU_1", LUC, ZOU, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route LUC_ZOU_2 = new Route("LUC_ZOU_2", LUC, ZOU, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route MAR_SIO_1 = new Route("MAR_SIO_1", MAR, SIO, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route NEU_SOL_1 = new Route("NEU_SOL_1", NEU, SOL, 4, Route.Level.OVERGROUND, Color.GREEN);
-        final Route NEU_YVE_1 = new Route("NEU_YVE_1", NEU, YVE, 2, Route.Level.OVERGROUND, Color.BLACK);
-        final Route OLT_SOL_1 = new Route("OLT_SOL_1", OLT, SOL, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route OLT_ZUR_1 = new Route("OLT_ZUR_1", OLT, ZUR, 3, Route.Level.OVERGROUND, Color.WHITE);
-        final Route PFA_SAR_1 = new Route("PFA_SAR_1", PFA, SAR, 3, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route PFA_SCZ_1 = new Route("PFA_SCZ_1", PFA, SCZ, 1, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route PFA_STG_1 = new Route("PFA_STG_1", PFA, STG, 3, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route PFA_ZUR_1 = new Route("PFA_ZUR_1", PFA, ZUR, 2, Route.Level.OVERGROUND, Color.BLUE);
-        final Route SAR_VAD_1 = new Route("SAR_VAD_1", SAR, VAD, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route SCE_WIN_1 = new Route("SCE_WIN_1", SCE, WIN, 1, Route.Level.OVERGROUND, Color.BLACK);
-        final Route SCE_WIN_2 = new Route("SCE_WIN_2", SCE, WIN, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route SCE_ZUR_1 = new Route("SCE_ZUR_1", SCE, ZUR, 3, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route SCZ_WAS_1 = new Route("SCZ_WAS_1", SCZ, WAS, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route SCZ_WAS_2 = new Route("SCZ_WAS_2", SCZ, WAS, 2, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route SCZ_ZOU_1 = new Route("SCZ_ZOU_1", SCZ, ZOU, 1, Route.Level.OVERGROUND, Color.BLACK);
-        final Route SCZ_ZOU_2 = new Route("SCZ_ZOU_2", SCZ, ZOU, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route STG_VAD_1 = new Route("STG_VAD_1", STG, VAD, 2, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route STG_WIN_1 = new Route("STG_WIN_1", STG, WIN, 3, Route.Level.OVERGROUND, Color.RED);
-        final Route STG_ZUR_1 = new Route("STG_ZUR_1", STG, ZUR, 4, Route.Level.OVERGROUND, Color.BLACK);
-        final Route WIN_ZUR_1 = new Route("WIN_ZUR_1", WIN, ZUR, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route WIN_ZUR_2 = new Route("WIN_ZUR_2", WIN, ZUR, 1, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route ZOU_ZUR_1 = new Route("ZOU_ZUR_1", ZOU, ZUR, 1, Route.Level.OVERGROUND, Color.GREEN);
-        final Route ZOU_ZUR_2 = new Route("ZOU_ZUR_2", ZOU, ZUR, 1, Route.Level.OVERGROUND, Color.RED);
-        final List<Route> ALL_ROUTES = List.of(
-                AT1_STG_1, AT2_VAD_1, BAD_BAL_1, BAD_OLT_1, BAD_ZUR_1, BAL_DE1_1,
-                BAL_DEL_1, BAL_OLT_1, BEL_LOC_1, BEL_LUG_1, BEL_LUG_2, BEL_WAS_1,
-                BEL_WAS_2, BER_FRI_1, BER_FRI_2, BER_INT_1, BER_LUC_1, BER_LUC_2,
-                BER_NEU_1, BER_SOL_1, BRI_INT_1, BRI_IT5_1, BRI_LOC_1, BRI_SIO_1,
-                BRI_WAS_1, BRU_COI_1, BRU_DAV_1, BRU_IT2_1, COI_DAV_1, COI_SAR_1,
-                COI_WAS_1, DAV_AT3_1, DAV_IT1_1, DAV_SAR_1, DE2_SCE_1, DE3_KRE_1,
-                DE4_KRE_1, DE5_STG_1, DEL_FR4_1, DEL_LCF_1, DEL_SOL_1, FR1_MAR_1,
-                FR2_GEN_1, FR3_LCF_1, FRI_LAU_1, FRI_LAU_2, GEN_LAU_1, GEN_LAU_2,
-                GEN_YVE_1, INT_LUC_1, IT3_LUG_1, IT4_LOC_1, KRE_SCE_1, KRE_STG_1,
-                KRE_WIN_1, LAU_MAR_1, LAU_NEU_1, LCF_NEU_1, LCF_YVE_1, LOC_LUG_1,
-                LUC_OLT_1, LUC_SCZ_1, LUC_ZOU_1, LUC_ZOU_2, MAR_SIO_1, NEU_SOL_1,
-                NEU_YVE_1, OLT_SOL_1, OLT_ZUR_1, PFA_SAR_1, PFA_SCZ_1, PFA_STG_1,
-                PFA_ZUR_1, SAR_VAD_1, SCE_WIN_1, SCE_WIN_2, SCE_ZUR_1, SCZ_WAS_1,
-                SCZ_WAS_2, SCZ_ZOU_1, SCZ_ZOU_2, STG_VAD_1, STG_WIN_1, STG_ZUR_1,
-                WIN_ZUR_1, WIN_ZUR_2, ZOU_ZUR_1, ZOU_ZUR_2);
-        //endregion
-
-        //region Tickets
-        final Ticket BAL_BER = new Ticket(BAL, BER, 5);
-        final Ticket BAL_BRI = new Ticket(BAL, BRI, 10);
-        final Ticket BAL_STG = new Ticket(BAL, STG, 8);
-        final Ticket BER_COI = new Ticket(BER, COI, 10);
-        final Ticket BER_LUG = new Ticket(BER, LUG, 12);
-        final Ticket BER_SCZ = new Ticket(BER, SCZ, 5);
-        final Ticket BER_ZUR = new Ticket(BER, ZUR, 6);
-        final Ticket FRI_LUC = new Ticket(FRI, LUC, 5);
-        final Ticket GEN_BAL = new Ticket(GEN, BAL, 13);
-        final Ticket GEN_BER = new Ticket(GEN, BER, 8);
-        final Ticket GEN_SIO = new Ticket(GEN, SIO, 10);
-        final Ticket GEN_ZUR = new Ticket(GEN, ZUR, 14);
-        final Ticket INT_WIN = new Ticket(INT, WIN, 7);
-        final Ticket KRE_ZUR = new Ticket(KRE, ZUR, 3);
-        final Ticket LAU_INT = new Ticket(LAU, INT, 7);
-        final Ticket LAU_LUC = new Ticket(LAU, LUC, 8);
-        final Ticket LAU_STG = new Ticket(LAU, STG, 13);
-        final Ticket LCF_BER = new Ticket(LCF, BER, 3);
-        final Ticket LCF_LUC = new Ticket(LCF, LUC, 7);
-        final Ticket LCF_ZUR = new Ticket(LCF, ZUR, 8);
-        final Ticket LUC_VAD = new Ticket(LUC, VAD, 6);
-        final Ticket LUC_ZUR = new Ticket(LUC, ZUR, 2);
-        final Ticket LUG_COI = new Ticket(LUG, COI, 10);
-        final Ticket NEU_WIN = new Ticket(NEU, WIN, 9);
-        final Ticket OLT_SCE = new Ticket(OLT, SCE, 5);
-        final Ticket SCE_MAR = new Ticket(SCE, MAR, 15);
-        final Ticket SCE_STG = new Ticket(SCE, STG, 4);
-        final Ticket SCE_ZOU = new Ticket(SCE, ZOU, 3);
-        final Ticket STG_BRU = new Ticket(STG, BRU, 9);
-        final Ticket WIN_SCZ = new Ticket(WIN, SCZ, 3);
-        final Ticket ZUR_BAL = new Ticket(ZUR, BAL, 4);
-        final Ticket ZUR_BRU = new Ticket(ZUR, BRU, 11);
-        final Ticket ZUR_LUG = new Ticket(ZUR, LUG, 9);
-        final Ticket ZUR_VAD = new Ticket(ZUR, VAD, 6);
-
-        final Ticket BER_C = ticketToNeighbors(List.of(BER), 6, 11, 8, 5);
-        final Ticket COI_C = ticketToNeighbors(List.of(COI), 6, 3, 5, 12);
-        final Ticket LUG_C = ticketToNeighbors(List.of(LUG), 12, 13, 2, 14);
-        final Ticket ZUR_C = ticketToNeighbors(List.of(ZUR), 3, 7, 11, 7);
-
-        final Ticket DE_C = ticketToNeighbors(DE, 0, 5, 13, 5);
-        final Ticket AT_C = ticketToNeighbors(AT, 5, 0, 6, 14);
-        final Ticket IT_C = ticketToNeighbors(IT, 13, 6, 0, 11);
-        final Ticket FR_C = ticketToNeighbors(FR, 5, 14, 11, 0);
-
-        final List<Ticket> ALL_TICKETS = List.of(
-                BAL_BER, BAL_BRI, BAL_STG, BER_COI, BER_LUG, BER_SCZ,
-                BER_ZUR, FRI_LUC, GEN_BAL, GEN_BER, GEN_SIO, GEN_ZUR,
-                INT_WIN, KRE_ZUR, LAU_INT, LAU_LUC, LAU_STG, LCF_BER,
-                LCF_LUC, LCF_ZUR, LUC_VAD, LUC_ZUR, LUG_COI, NEU_WIN,
-                OLT_SCE, SCE_MAR, SCE_STG, SCE_ZOU, STG_BRU, WIN_SCZ,
-                ZUR_BAL, ZUR_BRU, ZUR_LUG, ZUR_VAD,
-                BER_C, COI_C, LUG_C, ZUR_C,
-                DE_C, DE_C, AT_C, AT_C, IT_C, IT_C, FR_C, FR_C);
-
-        private Ticket ticketToNeighbors(List<Station> from, int de, int at, int it, int fr) {
-            var trips = new ArrayList<Trip>();
-            if (de != 0) trips.addAll(Trip.all(from, DE, de));
-            if (at != 0) trips.addAll(Trip.all(from, AT, at));
-            if (it != 0) trips.addAll(Trip.all(from, IT, it));
-            if (fr != 0) trips.addAll(Trip.all(from, FR, fr));
-            return new Ticket(trips);
-        }
-        //endregion
-    }
-}
Index: .idea/uiDesigner.xml
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
deleted file mode 100644
--- a/.idea/uiDesigner.xml	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,124 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
\ No newline at end of file
Index: testProf/ch/epfl/tchu/game/GameTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/GameTestProf.java b/testProf/ch/epfl/tchu/game/GameTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/GameTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,642 +0,0 @@
-package ch.epfl.tchu.game;
-
-import ch.epfl.tchu.SortedBag;
-import org.junit.jupiter.api.Test;
-
-import java.util.*;
-import java.util.stream.Collectors;
-
-import static ch.epfl.tchu.game.GameTestProf.PlayerMethod.*;
-import static org.junit.jupiter.api.Assertions.*;
-
-class GameTestProf {
-    enum PlayerMethod {
-        INIT_PLAYERS,
-        RECEIVE_INFO,
-        UPDATE_STATE,
-        SET_INITIAL_TICKET_CHOICE,
-        CHOOSE_INITIAL_TICKETS,
-        NEXT_TURN,
-        CHOOSE_TICKETS,
-        DRAW_SLOT,
-        CLAIMED_ROUTE,
-        INITIAL_CLAIM_CARDS,
-        CHOOSE_ADDITIONAL_CARDS
-    }
-
-//    @BeforeAll
-//    static void redirectSystemOut() {
-//        System.setOut(new PrintStream(OutputStream.nullOutputStream()));
-//        System.setErr(new PrintStream(OutputStream.nullOutputStream()));
-//    }
-
-    @Test
-    void gamePlayFailsWithNotEnoughPlayers() {
-        var playerNames = Map.of(PlayerId.PLAYER_1, "1", PlayerId.PLAYER_2, "2");
-
-        assertThrows(IllegalArgumentException.class, () -> {
-            Game.play(Map.of(), playerNames, SortedBag.of(), new Random(2021));
-        });
-
-        assertThrows(IllegalArgumentException.class, () -> {
-            Game.play(
-                    Map.of(PlayerId.PLAYER_1, new TestPlayer(0, List.of())),
-                    playerNames,
-                    SortedBag.of(),
-                    new Random(2021));
-        });
-    }
-
-    @Test
-    void gamePlayFailsWithNotEnoughPlayerNames() {
-        var players = Map.of(
-                PlayerId.PLAYER_1, (Player) new TestPlayer(0, List.of()),
-                PlayerId.PLAYER_2, (Player) new TestPlayer(0, List.of()));
-
-        assertThrows(IllegalArgumentException.class, () -> {
-            Game.play(players, Map.of(), SortedBag.of(), new Random(2021));
-        });
-
-        assertThrows(IllegalArgumentException.class, () -> {
-            Game.play(
-                    players,
-                    Map.of(PlayerId.PLAYER_1, "1"),
-                    SortedBag.of(),
-                    new Random(2021));
-        });
-    }
-
-    @Test
-    void gamePlayCallsInitPlayersExactlyOnce() {
-        var unusedPlayerIds = EnumSet.allOf(PlayerId.class);
-        var playerNames = (Map<PlayerId, String>) null;
-        for (var player : playRandomGame(2020)) {
-            var callSummary = player.callSummary();
-            assertEquals(1, callSummary.get(PlayerMethod.INIT_PLAYERS));
-
-            unusedPlayerIds.remove(player.ownId);
-            if (playerNames != null) assertEquals(playerNames, player.playerNames);
-            playerNames = player.playerNames;
-        }
-        assertEquals(Set.of(), unusedPlayerIds);
-    }
-
-    @Test
-    void gamePlayCallsReceiveInfoOftenEnough() {
-        var players = playRandomGame(2021);
-
-        var receiveInfo1 = (int) players.get(0).callSummary().get(RECEIVE_INFO);
-        var receiveInfo2 = (int) players.get(1).callSummary().get(RECEIVE_INFO);
-        assertEquals(receiveInfo1, receiveInfo2);
-        assertTrue(100 <= receiveInfo1 && receiveInfo1 <= 1_000);
-    }
-
-
-    @Test
-    void gamePlayCallsUpdateStateOftenEnough() {
-        var players = playRandomGame(2022);
-
-        var updateState1 = (int) players.get(0).callSummary().get(UPDATE_STATE);
-        var updateState2 = (int) players.get(1).callSummary().get(UPDATE_STATE);
-        assertEquals(updateState1, updateState2);
-        assertTrue(100 <= updateState1 && updateState1 <= 1_000);
-    }
-
-    @Test
-    void gamePlayCallsSetInitialTicketChoice() {
-        for (var player : playRandomGame(2023)) {
-            var callSummary = player.callSummary();
-            assertEquals(1, callSummary.get(SET_INITIAL_TICKET_CHOICE));
-            assertEquals(5, player.allTicketsSeen.getFirst().size());
-        }
-    }
-
-    @Test
-    void gamePlayCallsSetInitialTicketChoiceFirstThenChooseInitialTickets() {
-        for (var player : playRandomGame(2024)) {
-            var filteredCalls = player.calls.stream()
-                    .filter(m -> m != INIT_PLAYERS && m != RECEIVE_INFO && m != UPDATE_STATE)
-                    .limit(3)
-                    .collect(Collectors.toList());
-            assertEquals(
-                    List.of(SET_INITIAL_TICKET_CHOICE, CHOOSE_INITIAL_TICKETS, NEXT_TURN),
-                    filteredCalls);
-        }
-    }
-
-    @Test
-    void gamePlayCallsChooseTicketsWhenPlayerDrawsTickets() {
-        var ticketBagB = new SortedBag.Builder<Ticket>();
-        for (var player : playRandomGame(2025)) {
-            var drawTicketsTurnsCount = player.allTurns.stream()
-                    .filter(Player.TurnKind.DRAW_TICKETS::equals)
-                    .count();
-            var chooseTicketsCallsCount = player.calls.stream()
-                    .filter(CHOOSE_TICKETS::equals)
-                    .count();
-            assertTrue(drawTicketsTurnsCount > 0);
-            assertEquals(drawTicketsTurnsCount, chooseTicketsCallsCount);
-
-            player.allTicketsSeen.forEach(ticketBagB::add);
-        }
-        var allTicketsBag = SortedBag.of(ChMap.ALL_TICKETS);
-        assertEquals(allTicketsBag, ticketBagB.build());
-    }
-
-    @Test
-    void gamePlayUpdatesStateBetweenCardDraws() {
-        for (var player : playRandomGame(2026)) {
-            var filteredCallsIt = player.calls.stream()
-                    .filter(m -> m == UPDATE_STATE || m == DRAW_SLOT)
-                    .iterator();
-            var prevCall = UPDATE_STATE;
-            while (filteredCallsIt.hasNext()) {
-                var call = filteredCallsIt.next();
-                if (call == DRAW_SLOT)
-                    assertEquals(UPDATE_STATE, prevCall);
-                prevCall = call;
-            }
-        }
-    }
-
-    @Test
-    void gamePlayCallsChooseAdditionalCardsAtLeastOnce() {
-        for (var player : playRandomGame(2027))
-            assertNotEquals(0, player.callSummary().get(CHOOSE_ADDITIONAL_CARDS));
-    }
-
-    @Test
-    void gamePlayCallsChooseAdditionalCardsRightAfterClaimedRouteOrInitialClaimCardsOnly() {
-        for (var player : playRandomGame(2028)) {
-            var filteredCallsIt = player.calls.stream()
-                    .filter(m -> m != RECEIVE_INFO && m != UPDATE_STATE)
-                    .iterator();
-            var prevCall = INIT_PLAYERS;
-            while (filteredCallsIt.hasNext()) {
-                var call = filteredCallsIt.next();
-                if (call == CHOOSE_ADDITIONAL_CARDS)
-                    assertTrue(prevCall == CLAIMED_ROUTE || prevCall == INITIAL_CLAIM_CARDS);
-                prevCall = call;
-            }
-        }
-    }
-
-    @Test
-    void gamePlayProperlyAnnouncesRouteClaims() {
-        for (var player : playRandomGame(2029)) {
-            var playerClaimedRoute = player.ownName() + " a pris possession de la route ";
-
-            var expectedInfosB = new SortedBag.Builder<String>();
-            player.ownState().routes().stream()
-                    .map(r -> playerClaimedRoute + r.station1() + " – " + r.station2())
-                    .forEach(expectedInfosB::add);
-            var expectedInfos = expectedInfosB.build();
-
-            var actualInfosB = new SortedBag.Builder<String>();
-            player.allInfos.stream()
-                    .filter(i -> i.startsWith(playerClaimedRoute))
-                    .map(i -> i.substring(0, i.indexOf(" au moyen de ")))
-                    .forEach(actualInfosB::add);
-            var actualInfos = actualInfosB.build();
-
-            assertEquals(expectedInfos, actualInfos);
-        }
-    }
-
-    @Test
-    void gamePlayProperlyCommunicatesLastTurn() {
-        for (var player : playRandomGame(2030)) {
-            var lastTurnInfoCount = player.allInfos.stream()
-                    .filter(i -> i.contains("le dernier tour commence"))
-                    .count();
-            assertEquals(1, lastTurnInfoCount);
-        }
-    }
-
-    @Test
-    void gamePlayProperlyHandlesLastTurn() {
-        for (var player : playRandomGame(2031)) {
-            var lastTurnsCount = player.allInfos.stream()
-                    .dropWhile(i -> !i.contains("le dernier tour commence"))
-                    .filter(i -> i.startsWith("\nC'est à"))
-                    .count();
-            assertEquals(2, lastTurnsCount);
-        }
-    }
-
-    @Test
-    void gamePlayProperlyCommunicatesLongestTrailBonus() {
-        for (var player : playRandomGame(2032)) {
-            var bonusInfoCount = player.allInfos.stream()
-                    .filter(i -> i.contains("reçoit un bonus de 10 points"))
-                    .count();
-            assertTrue(1 <= bonusInfoCount && bonusInfoCount <= 2);
-        }
-    }
-
-    @Test
-    void gamePlayProperlyCommunicatesResult() {
-        for (var player : playRandomGame(2033)) {
-            var outcomeInfo = player.allInfos.stream()
-                    .filter(i -> i.contains("remporte la victoire") || i.contains("sont ex æqo"))
-                    .collect(Collectors.toList());
-            assertEquals(1, outcomeInfo.size());
-            assertEquals(player.allInfos.getLast(), outcomeInfo.get(0));
-        }
-    }
-
-    private static List<TestPlayer> playRandomGame(long randomSeed) {
-        var rng = new Random(randomSeed);
-        var routes = ChMap.ALL_ROUTES;
-        var tickets = ChMap.ALL_TICKETS;
-        var p1 = new TestPlayer(rng.nextLong(), routes);
-        var p2 = new TestPlayer(rng.nextLong(), routes);
-        var players = Map.of(
-                PlayerId.PLAYER_1, (Player) p1,
-                PlayerId.PLAYER_2, (Player) p2);
-        var playerNames = Map.of(
-                PlayerId.PLAYER_1, "Ada",
-                PlayerId.PLAYER_2, "Charles");
-        Game.play(players, playerNames, SortedBag.of(tickets), rng);
-        return List.of(p1, p2);
-    }
-
-    private static final class TooManyCallsError extends Error {
-    }
-
-    private static final class TestPlayer implements Player {
-        private static final int CALLS_LIMIT = 10_000;
-        private static final int MIN_CARD_COUNT = 16;
-        private static final int DRAW_TICKETS_ODDS = 15;
-        private static final int ABANDON_TUNNEL_ODDS = 10;
-        private static final int DRAW_ALL_TICKETS_TURN = 30;
-
-        private final Random rng;
-        private final List<Route> allRoutes;
-
-        private final Deque<PlayerMethod> calls = new ArrayDeque<>();
-
-        private final Deque<TurnKind> allTurns = new ArrayDeque<>();
-        private final Deque<String> allInfos = new ArrayDeque<>();
-        private final Deque<PublicGameState> allGameStates = new ArrayDeque<>();
-        private final Deque<PlayerState> allOwnStates = new ArrayDeque<>();
-        private final Deque<SortedBag<Ticket>> allTicketsSeen = new ArrayDeque<>();
-
-        private PlayerId ownId;
-        private Map<PlayerId, String> playerNames;
-
-        private Route routeToClaim;
-        private SortedBag<Card> initialClaimCards;
-
-        private void registerCall(PlayerMethod key) {
-            calls.add(key);
-            if (calls.size() >= CALLS_LIMIT)
-                throw new TooManyCallsError();
-        }
-
-        private Map<PlayerMethod, Integer> callSummary() {
-            var summary = new EnumMap<PlayerMethod, Integer>(PlayerMethod.class);
-            calls.forEach(c -> summary.merge(c, 1, Integer::sum));
-            return summary;
-        }
-
-        private PublicGameState gameState() {
-            return allGameStates.getLast();
-        }
-
-        private PlayerState ownState() {
-            return allOwnStates.getLast();
-        }
-
-        private String ownName() {
-            if (ownId == null || playerNames == null)
-                return "<anonyme>";
-            else
-                return playerNames.getOrDefault(ownId, "<anonyme>");
-        }
-
-        public TestPlayer(long randomSeed, List<Route> allRoutes) {
-            this.rng = new Random(randomSeed);
-            this.allRoutes = List.copyOf(allRoutes);
-        }
-
-        @Override
-        public void initPlayers(PlayerId ownId, Map<PlayerId, String> playerNames) {
-            registerCall(PlayerMethod.INIT_PLAYERS);
-            this.ownId = ownId;
-            this.playerNames = Map.copyOf(playerNames);
-        }
-
-        @Override
-        public void receiveInfo(String info) {
-            registerCall(RECEIVE_INFO);
-            allInfos.addLast(info);
-        }
-
-        @Override
-        public void updateState(PublicGameState newState, PlayerState ownState) {
-            registerCall(UPDATE_STATE);
-            allGameStates.addLast(newState);
-            allOwnStates.addLast(ownState);
-        }
-
-        @Override
-        public void setInitialTicketChoice(SortedBag<Ticket> tickets) {
-            registerCall(SET_INITIAL_TICKET_CHOICE);
-            allTicketsSeen.addLast(tickets);
-        }
-
-        @Override
-        public SortedBag<Ticket> chooseInitialTickets() {
-            registerCall(PlayerMethod.CHOOSE_INITIAL_TICKETS);
-            return allTicketsSeen.peekFirst();
-        }
-
-        @Override
-        public TurnKind nextTurn() {
-            registerCall(PlayerMethod.NEXT_TURN);
-
-            var turn = doNextTurn();
-            allTurns.addLast(turn);
-            return turn;
-        }
-
-        private TurnKind doNextTurn() {
-            var gameState = gameState();
-            if (gameState.canDrawTickets()
-                    && (allTurns.size() >= DRAW_ALL_TICKETS_TURN
-                    || rng.nextInt(DRAW_TICKETS_ODDS) == 0))
-                return TurnKind.DRAW_TICKETS;
-
-            var ownState = ownState();
-            var claimedRoutes = new HashSet<>(gameState.claimedRoutes());
-            var claimableRoutes = allRoutes.stream()
-                    .filter(r -> !claimedRoutes.contains(r))
-                    .filter(ownState::canClaimRoute)
-                    .collect(Collectors.toCollection(ArrayList::new));
-            if (claimableRoutes.isEmpty() || ownState.cardCount() < MIN_CARD_COUNT) {
-                return TurnKind.DRAW_CARDS;
-            } else {
-                var route = claimableRoutes.get(rng.nextInt(claimableRoutes.size()));
-                for (int i = 0; i < 3 && route.level() == Route.Level.OVERGROUND; i++) {
-                    // slightly favor tunnels
-                    route = claimableRoutes.get(rng.nextInt(claimableRoutes.size()));
-                }
-
-                var cards = ownState.possibleClaimCards(route);
-
-                routeToClaim = route;
-                initialClaimCards = cards.isEmpty() ? null : cards.get(0);
-                return TurnKind.CLAIM_ROUTE;
-            }
-        }
-
-        @Override
-        public SortedBag<Ticket> chooseTickets(SortedBag<Ticket> options) {
-            registerCall(PlayerMethod.CHOOSE_TICKETS);
-
-            allTicketsSeen.addLast(options);
-
-            var shuffledOptions = new ArrayList<>(options.toList());
-            Collections.shuffle(shuffledOptions, rng);
-            var ticketsToKeep = 1 + rng.nextInt(options.size());
-            return SortedBag.of(shuffledOptions.subList(0, ticketsToKeep));
-        }
-
-        @Override
-        public int drawSlot() {
-            registerCall(PlayerMethod.DRAW_SLOT);
-            return rng.nextInt(6) - 1;
-        }
-
-        @Override
-        public Route claimedRoute() {
-            registerCall(PlayerMethod.CLAIMED_ROUTE);
-            return routeToClaim;
-        }
-
-        @Override
-        public SortedBag<Card> initialClaimCards() {
-            registerCall(PlayerMethod.INITIAL_CLAIM_CARDS);
-            return initialClaimCards;
-        }
-
-        @Override
-        public SortedBag<Card> chooseAdditionalCards(List<SortedBag<Card>> options) {
-            registerCall(PlayerMethod.CHOOSE_ADDITIONAL_CARDS);
-            return rng.nextInt(ABANDON_TUNNEL_ODDS) == 0
-                    ? SortedBag.of()
-                    : options.get(rng.nextInt(options.size()));
-        }
-    }
-
-    // Simplified Swiss map (only single routes)
-    private static final class ChMap {
-        private ChMap() {
-        }
-
-        // Stations - cities
-        private static final Station BAD = new Station(0, "Baden");
-        private static final Station BAL = new Station(1, "Bâle");
-        private static final Station BEL = new Station(2, "Bellinzone");
-        private static final Station BER = new Station(3, "Berne");
-        private static final Station BRI = new Station(4, "Brigue");
-        private static final Station BRU = new Station(5, "Brusio");
-        private static final Station COI = new Station(6, "Coire");
-        private static final Station DAV = new Station(7, "Davos");
-        private static final Station DEL = new Station(8, "Delémont");
-        private static final Station FRI = new Station(9, "Fribourg");
-        private static final Station GEN = new Station(10, "Genève");
-        private static final Station INT = new Station(11, "Interlaken");
-        private static final Station KRE = new Station(12, "Kreuzlingen");
-        private static final Station LAU = new Station(13, "Lausanne");
-        private static final Station LCF = new Station(14, "La Chaux-de-Fonds");
-        private static final Station LOC = new Station(15, "Locarno");
-        private static final Station LUC = new Station(16, "Lucerne");
-        private static final Station LUG = new Station(17, "Lugano");
-        private static final Station MAR = new Station(18, "Martigny");
-        private static final Station NEU = new Station(19, "Neuchâtel");
-        private static final Station OLT = new Station(20, "Olten");
-        private static final Station PFA = new Station(21, "Pfäffikon");
-        private static final Station SAR = new Station(22, "Sargans");
-        private static final Station SCE = new Station(23, "Schaffhouse");
-        private static final Station SCZ = new Station(24, "Schwyz");
-        private static final Station SIO = new Station(25, "Sion");
-        private static final Station SOL = new Station(26, "Soleure");
-        private static final Station STG = new Station(27, "Saint-Gall");
-        private static final Station VAD = new Station(28, "Vaduz");
-        private static final Station WAS = new Station(29, "Wassen");
-        private static final Station WIN = new Station(30, "Winterthour");
-        private static final Station YVE = new Station(31, "Yverdon");
-        private static final Station ZOU = new Station(32, "Zoug");
-        private static final Station ZUR = new Station(33, "Zürich");
-
-        // Stations - countries
-        private static final Station DE1 = new Station(34, "Allemagne");
-        private static final Station DE2 = new Station(35, "Allemagne");
-        private static final Station DE3 = new Station(36, "Allemagne");
-        private static final Station DE4 = new Station(37, "Allemagne");
-        private static final Station DE5 = new Station(38, "Allemagne");
-        private static final Station AT1 = new Station(39, "Autriche");
-        private static final Station AT2 = new Station(40, "Autriche");
-        private static final Station AT3 = new Station(41, "Autriche");
-        private static final Station IT1 = new Station(42, "Italie");
-        private static final Station IT2 = new Station(43, "Italie");
-        private static final Station IT3 = new Station(44, "Italie");
-        private static final Station IT4 = new Station(45, "Italie");
-        private static final Station IT5 = new Station(46, "Italie");
-        private static final Station FR1 = new Station(47, "France");
-        private static final Station FR2 = new Station(48, "France");
-        private static final Station FR3 = new Station(49, "France");
-        private static final Station FR4 = new Station(50, "France");
-
-        // Countries
-        private static final List<Station> DE = List.of(DE1, DE2, DE3, DE4, DE5);
-        private static final List<Station> AT = List.of(AT1, AT2, AT3);
-        private static final List<Station> IT = List.of(IT1, IT2, IT3, IT4, IT5);
-        private static final List<Station> FR = List.of(FR1, FR2, FR3, FR4);
-
-        // Routes (without double routes!)
-        private static final List<Route> ALL_ROUTES = List.of(
-                new Route("AT1_STG_1", AT1, STG, 4, Route.Level.UNDERGROUND, null),
-                new Route("AT2_VAD_1", AT2, VAD, 1, Route.Level.UNDERGROUND, Color.RED),
-                new Route("BAD_BAL_1", BAD, BAL, 3, Route.Level.UNDERGROUND, Color.RED),
-                new Route("BAD_OLT_1", BAD, OLT, 2, Route.Level.OVERGROUND, Color.VIOLET),
-                new Route("BAD_ZUR_1", BAD, ZUR, 1, Route.Level.OVERGROUND, Color.YELLOW),
-                new Route("BAL_DE1_1", BAL, DE1, 1, Route.Level.UNDERGROUND, Color.BLUE),
-                new Route("BAL_DEL_1", BAL, DEL, 2, Route.Level.UNDERGROUND, Color.YELLOW),
-                new Route("BAL_OLT_1", BAL, OLT, 2, Route.Level.UNDERGROUND, Color.ORANGE),
-                new Route("BEL_LOC_1", BEL, LOC, 1, Route.Level.UNDERGROUND, Color.BLACK),
-                new Route("BEL_LUG_1", BEL, LUG, 1, Route.Level.UNDERGROUND, Color.RED),
-                new Route("BEL_WAS_1", BEL, WAS, 4, Route.Level.UNDERGROUND, null),
-                new Route("BER_FRI_1", BER, FRI, 1, Route.Level.OVERGROUND, Color.ORANGE),
-                new Route("BER_INT_1", BER, INT, 3, Route.Level.OVERGROUND, Color.BLUE),
-                new Route("BER_LUC_1", BER, LUC, 4, Route.Level.OVERGROUND, null),
-                new Route("BER_NEU_1", BER, NEU, 2, Route.Level.OVERGROUND, Color.RED),
-                new Route("BER_SOL_1", BER, SOL, 2, Route.Level.OVERGROUND, Color.BLACK),
-                new Route("BRI_INT_1", BRI, INT, 2, Route.Level.UNDERGROUND, Color.WHITE),
-                new Route("BRI_IT5_1", BRI, IT5, 3, Route.Level.UNDERGROUND, Color.GREEN),
-                new Route("BRI_LOC_1", BRI, LOC, 6, Route.Level.UNDERGROUND, null),
-                new Route("BRI_SIO_1", BRI, SIO, 3, Route.Level.UNDERGROUND, Color.BLACK),
-                new Route("BRI_WAS_1", BRI, WAS, 4, Route.Level.UNDERGROUND, Color.RED),
-                new Route("BRU_COI_1", BRU, COI, 5, Route.Level.UNDERGROUND, null),
-                new Route("BRU_DAV_1", BRU, DAV, 4, Route.Level.UNDERGROUND, Color.BLUE),
-                new Route("BRU_IT2_1", BRU, IT2, 2, Route.Level.UNDERGROUND, Color.GREEN),
-                new Route("COI_DAV_1", COI, DAV, 2, Route.Level.UNDERGROUND, Color.VIOLET),
-                new Route("COI_SAR_1", COI, SAR, 1, Route.Level.UNDERGROUND, Color.WHITE),
-                new Route("COI_WAS_1", COI, WAS, 5, Route.Level.UNDERGROUND, null),
-                new Route("DAV_AT3_1", DAV, AT3, 3, Route.Level.UNDERGROUND, null),
-                new Route("DAV_IT1_1", DAV, IT1, 3, Route.Level.UNDERGROUND, null),
-                new Route("DAV_SAR_1", DAV, SAR, 3, Route.Level.UNDERGROUND, Color.BLACK),
-                new Route("DE2_SCE_1", DE2, SCE, 1, Route.Level.OVERGROUND, Color.YELLOW),
-                new Route("DE3_KRE_1", DE3, KRE, 1, Route.Level.OVERGROUND, Color.ORANGE),
-                new Route("DE4_KRE_1", DE4, KRE, 1, Route.Level.OVERGROUND, Color.WHITE),
-                new Route("DE5_STG_1", DE5, STG, 2, Route.Level.OVERGROUND, null),
-                new Route("DEL_FR4_1", DEL, FR4, 2, Route.Level.UNDERGROUND, Color.BLACK),
-                new Route("DEL_LCF_1", DEL, LCF, 3, Route.Level.UNDERGROUND, Color.WHITE),
-                new Route("DEL_SOL_1", DEL, SOL, 1, Route.Level.UNDERGROUND, Color.VIOLET),
-                new Route("FR1_MAR_1", FR1, MAR, 2, Route.Level.UNDERGROUND, null),
-                new Route("FR2_GEN_1", FR2, GEN, 1, Route.Level.OVERGROUND, Color.YELLOW),
-                new Route("FR3_LCF_1", FR3, LCF, 2, Route.Level.UNDERGROUND, Color.GREEN),
-                new Route("FRI_LAU_1", FRI, LAU, 3, Route.Level.OVERGROUND, Color.RED),
-                new Route("GEN_LAU_1", GEN, LAU, 4, Route.Level.OVERGROUND, Color.BLUE),
-                new Route("GEN_YVE_1", GEN, YVE, 6, Route.Level.OVERGROUND, null),
-                new Route("INT_LUC_1", INT, LUC, 4, Route.Level.OVERGROUND, Color.VIOLET),
-                new Route("IT3_LUG_1", IT3, LUG, 2, Route.Level.UNDERGROUND, Color.WHITE),
-                new Route("IT4_LOC_1", IT4, LOC, 2, Route.Level.UNDERGROUND, Color.ORANGE),
-                new Route("KRE_SCE_1", KRE, SCE, 3, Route.Level.OVERGROUND, Color.VIOLET),
-                new Route("KRE_STG_1", KRE, STG, 1, Route.Level.OVERGROUND, Color.GREEN),
-                new Route("KRE_WIN_1", KRE, WIN, 2, Route.Level.OVERGROUND, Color.YELLOW),
-                new Route("LAU_MAR_1", LAU, MAR, 4, Route.Level.UNDERGROUND, Color.ORANGE),
-                new Route("LAU_NEU_1", LAU, NEU, 4, Route.Level.OVERGROUND, null),
-                new Route("LCF_NEU_1", LCF, NEU, 1, Route.Level.UNDERGROUND, Color.ORANGE),
-                new Route("LCF_YVE_1", LCF, YVE, 3, Route.Level.UNDERGROUND, Color.YELLOW),
-                new Route("LOC_LUG_1", LOC, LUG, 1, Route.Level.UNDERGROUND, Color.VIOLET),
-                new Route("LUC_OLT_1", LUC, OLT, 3, Route.Level.OVERGROUND, Color.GREEN),
-                new Route("LUC_SCZ_1", LUC, SCZ, 1, Route.Level.OVERGROUND, Color.BLUE),
-                new Route("LUC_ZOU_1", LUC, ZOU, 1, Route.Level.OVERGROUND, Color.ORANGE),
-                new Route("MAR_SIO_1", MAR, SIO, 2, Route.Level.UNDERGROUND, Color.GREEN),
-                new Route("NEU_SOL_1", NEU, SOL, 4, Route.Level.OVERGROUND, Color.GREEN),
-                new Route("NEU_YVE_1", NEU, YVE, 2, Route.Level.OVERGROUND, Color.BLACK),
-                new Route("OLT_SOL_1", OLT, SOL, 1, Route.Level.OVERGROUND, Color.BLUE),
-                new Route("OLT_ZUR_1", OLT, ZUR, 3, Route.Level.OVERGROUND, Color.WHITE),
-                new Route("PFA_SAR_1", PFA, SAR, 3, Route.Level.UNDERGROUND, Color.YELLOW),
-                new Route("PFA_SCZ_1", PFA, SCZ, 1, Route.Level.OVERGROUND, Color.VIOLET),
-                new Route("PFA_STG_1", PFA, STG, 3, Route.Level.OVERGROUND, Color.ORANGE),
-                new Route("PFA_ZUR_1", PFA, ZUR, 2, Route.Level.OVERGROUND, Color.BLUE),
-                new Route("SAR_VAD_1", SAR, VAD, 1, Route.Level.UNDERGROUND, Color.ORANGE),
-                new Route("SCE_WIN_1", SCE, WIN, 1, Route.Level.OVERGROUND, Color.BLACK),
-                new Route("SCE_ZUR_1", SCE, ZUR, 3, Route.Level.OVERGROUND, Color.ORANGE),
-                new Route("SCZ_WAS_1", SCZ, WAS, 2, Route.Level.UNDERGROUND, Color.GREEN),
-                new Route("SCZ_ZOU_1", SCZ, ZOU, 1, Route.Level.OVERGROUND, Color.BLACK),
-                new Route("STG_VAD_1", STG, VAD, 2, Route.Level.UNDERGROUND, Color.BLUE),
-                new Route("STG_WIN_1", STG, WIN, 3, Route.Level.OVERGROUND, Color.RED),
-                new Route("STG_ZUR_1", STG, ZUR, 4, Route.Level.OVERGROUND, Color.BLACK),
-                new Route("WIN_ZUR_1", WIN, ZUR, 1, Route.Level.OVERGROUND, Color.BLUE),
-                new Route("ZOU_ZUR_1", ZOU, ZUR, 1, Route.Level.OVERGROUND, Color.GREEN));
-
-        // Tickets
-        private static final Ticket deToNeighbors = ticketToNeighbors(DE, 0, 5, 13, 5);
-        private static final Ticket atToNeighbors = ticketToNeighbors(AT, 5, 0, 6, 14);
-        private static final Ticket itToNeighbors = ticketToNeighbors(IT, 13, 6, 0, 11);
-        private static final Ticket frToNeighbors = ticketToNeighbors(FR, 5, 14, 11, 0);
-
-        private static final List<Ticket> ALL_TICKETS = List.of(
-                // City-to-city tickets
-                new Ticket(BAL, BER, 5),
-                new Ticket(BAL, BRI, 10),
-                new Ticket(BAL, STG, 8),
-                new Ticket(BER, COI, 10),
-                new Ticket(BER, LUG, 12),
-                new Ticket(BER, SCZ, 5),
-                new Ticket(BER, ZUR, 6),
-                new Ticket(FRI, LUC, 5),
-                new Ticket(GEN, BAL, 13),
-                new Ticket(GEN, BER, 8),
-                new Ticket(GEN, SIO, 10),
-                new Ticket(GEN, ZUR, 14),
-                new Ticket(INT, WIN, 7),
-                new Ticket(KRE, ZUR, 3),
-                new Ticket(LAU, INT, 7),
-                new Ticket(LAU, LUC, 8),
-                new Ticket(LAU, STG, 13),
-                new Ticket(LCF, BER, 3),
-                new Ticket(LCF, LUC, 7),
-                new Ticket(LCF, ZUR, 8),
-                new Ticket(LUC, VAD, 6),
-                new Ticket(LUC, ZUR, 2),
-                new Ticket(LUG, COI, 10),
-                new Ticket(NEU, WIN, 9),
-                new Ticket(OLT, SCE, 5),
-                new Ticket(SCE, MAR, 15),
-                new Ticket(SCE, STG, 4),
-                new Ticket(SCE, ZOU, 3),
-                new Ticket(STG, BRU, 9),
-                new Ticket(WIN, SCZ, 3),
-                new Ticket(ZUR, BAL, 4),
-                new Ticket(ZUR, BRU, 11),
-                new Ticket(ZUR, LUG, 9),
-                new Ticket(ZUR, VAD, 6),
-
-                // City to country tickets
-                ticketToNeighbors(List.of(BER), 6, 11, 8, 5),
-                ticketToNeighbors(List.of(COI), 6, 3, 5, 12),
-                ticketToNeighbors(List.of(LUG), 12, 13, 2, 14),
-                ticketToNeighbors(List.of(ZUR), 3, 7, 11, 7),
-
-                // Country to country tickets (two of each)
-                deToNeighbors, deToNeighbors,
-                atToNeighbors, atToNeighbors,
-                itToNeighbors, itToNeighbors,
-                frToNeighbors, frToNeighbors);
-
-        private static Ticket ticketToNeighbors(List<Station> from, int de, int at, int it, int fr) {
-            var trips = new ArrayList<Trip>();
-            if (de != 0) trips.addAll(Trip.all(from, DE, de));
-            if (at != 0) trips.addAll(Trip.all(from, AT, at));
-            if (it != 0) trips.addAll(Trip.all(from, IT, it));
-            if (fr != 0) trips.addAll(Trip.all(from, FR, fr));
-            return new Ticket(trips);
-        }
-    }
-}
Index: .idea/artifacts/rendu.xml
===================================================================
diff --git a/.idea/artifacts/rendu.xml b/.idea/artifacts/rendu.xml
deleted file mode 100644
--- a/.idea/artifacts/rendu.xml	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,14 +0,0 @@
-<component name="ArtifactManager">
-  <artifact name="rendu">
-    <output-path>$PROJECT_DIR$/out/artifacts/rendu</output-path>
-    <root id="root">
-      <element id="archive" name="projet-cs108.zip">
-        <element id="directory" name="MonProjet">
-          <element id="directory" name="src">
-            <element id="dir-copy" path="$PROJECT_DIR$/src" />
-          </element>
-        </element>
-      </element>
-    </root>
-  </artifact>
-</component>
\ No newline at end of file
Index: testProf/ch/epfl/tchu/game/TrailTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/TrailTestProf.java b/testProf/ch/epfl/tchu/game/TrailTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/TrailTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,483 +0,0 @@
-package ch.epfl.tchu.game;
-
-import org.junit.jupiter.api.Test;
-
-import java.util.List;
-import java.util.Set;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class TrailTestProf {
-    @Test
-    void trailLongestWorksOnGivenExample() {
-        var s1 = new Station(1, "Yverdon");
-        var s2 = new Station(2, "Fribourg");
-        var s3 = new Station(3, "Neuchâtel");
-        var s4 = new Station(4, "Berne");
-        var s5 = new Station(5, "Lucerne");
-        var s6 = new Station(6, "Soleure");
-
-        var routes = List.of(
-                new Route("A", s3, s1, 2, Route.Level.OVERGROUND, Color.BLACK),
-                new Route("B", s3, s6, 4, Route.Level.OVERGROUND, Color.GREEN),
-                new Route("C", s4, s3, 2, Route.Level.OVERGROUND, Color.RED),
-                new Route("D", s4, s6, 2, Route.Level.OVERGROUND, Color.BLACK),
-                new Route("E", s4, s5, 4, Route.Level.OVERGROUND, null),
-                new Route("F", s4, s2, 1, Route.Level.OVERGROUND, Color.ORANGE));
-
-        var longest = Trail.longest(routes);
-        assertEquals(13, longest.length());
-        if (s2.equals(longest.station1()))
-            assertEquals(s5, longest.station2());
-        else if (s2.equals(longest.station2()))
-            assertEquals(s5, longest.station1());
-        else
-            fail("Unexpected start station: " + longest.station1());
-    }
-
-    @Test
-    void trailLongestWorksWithEmptyRoutes() {
-        var longest = Trail.longest(List.of());
-        assertEquals(0, longest.length());
-        assertNull(longest.station1());
-        assertNull(longest.station2());
-    }
-
-    @Test
-    void trailLongestWorksWithDisconnectedRoutes() {
-        var chRoutes = new ChRoutes();
-        var routes = List.of(
-                chRoutes.SAR_VAD_1,
-                chRoutes.BER_LUC_1,
-                chRoutes.GEN_YVE_1,
-                chRoutes.IT3_LUG_1);
-        var longest = Trail.longest(routes);
-        assertEquals(6, longest.length());
-        if (longest.station1().equals(chRoutes.GEN))
-            assertEquals(longest.station2(), chRoutes.YVE);
-        else if (longest.station1().equals(chRoutes.YVE))
-            assertEquals(longest.station1(), chRoutes.GEN);
-        else
-            fail("Unexpected start station: " + longest.station1());
-    }
-
-    @Test
-    void trailLongestWorksWithSingleCycle() {
-        var chRoutes = new ChRoutes();
-        var routes = List.of(
-                chRoutes.FRI_LAU_1,
-                chRoutes.BER_FRI_1,
-                chRoutes.BER_LUC_1,
-                chRoutes.INT_LUC_1,
-                chRoutes.BRI_INT_1,
-                chRoutes.BRI_SIO_1,
-                chRoutes.MAR_SIO_1,
-                chRoutes.LAU_MAR_1);
-        var longest = Trail.longest(routes);
-        assertEquals(23, longest.length());
-    }
-
-    @Test
-    void trailLongestWorksWithDoubleCycle() {
-        var chRoutes = new ChRoutes();
-        var routes = List.of(
-                chRoutes.BER_SOL_1,
-                chRoutes.OLT_SOL_1,
-                chRoutes.LUC_OLT_1,
-                chRoutes.INT_LUC_1,
-                chRoutes.BER_INT_1,
-                chRoutes.BER_LUC_1);
-        var longest = Trail.longest(routes);
-        assertEquals(17, longest.length());
-    }
-
-    @Test
-    void trailLongestWorksWithTripleCycle() {
-        var chRoutes = new ChRoutes();
-        var routes = List.of(
-                chRoutes.SCE_ZUR_1,
-                chRoutes.SCE_WIN_1,
-                chRoutes.WIN_ZUR_1,
-                chRoutes.STG_ZUR_1,
-                chRoutes.PFA_STG_1,
-                chRoutes.PFA_ZUR_1,
-                chRoutes.ZOU_ZUR_1,
-                chRoutes.LUC_ZOU_1,
-                chRoutes.LUC_OLT_1,
-                chRoutes.OLT_ZUR_1,
-                chRoutes.BAD_ZUR_1);
-        var longest = Trail.longest(routes);
-        assertEquals(23, longest.length());
-    }
-
-    @Test
-    void trailLongestTrailWorksOnKnownExample1() {
-        var routes = new ChRoutes();
-
-        var routesR = List.of(
-                routes.FR2_GEN_1,
-                routes.GEN_LAU_1,
-                routes.LAU_MAR_1,
-                routes.MAR_SIO_1,
-                routes.BRI_SIO_1,
-                routes.BRI_IT5_1,
-                routes.LAU_NEU_1,
-                routes.FRI_LAU_1,
-                routes.BER_FRI_1,
-                routes.BER_LUC_1,
-                routes.LUC_ZOU_1,
-                routes.ZOU_ZUR_1,
-                routes.STG_ZUR_1,
-                routes.DE5_STG_1,
-                routes.STG_VAD_1);
-
-        var routesG = List.of(
-                routes.BER_NEU_1,
-                routes.BER_SOL_1,
-                routes.OLT_SOL_1,
-                routes.BAD_OLT_1,
-                routes.BAD_ZUR_1,
-                routes.WIN_ZUR_1,
-                routes.PFA_ZUR_1,
-                routes.LUC_OLT_1,
-                routes.LUC_SCZ_1,
-                routes.SCZ_WAS_1,
-                routes.BEL_WAS_1,
-                routes.BEL_LUG_1,
-                routes.COI_WAS_1,
-                routes.COI_SAR_1,
-                routes.COI_DAV_1,
-                routes.DAV_AT3_1,
-                routes.BRU_COI_1);
-
-        var routesB = List.of(
-                routes.FRI_LAU_2,
-                routes.BER_FRI_2,
-                routes.BER_LUC_2,
-                routes.LUC_ZOU_2,
-                routes.ZOU_ZUR_2,
-                routes.OLT_ZUR_1,
-                routes.BAL_OLT_1,
-                routes.BAL_DE1_1,
-                routes.BAL_DEL_1,
-                routes.SCZ_ZOU_2,
-                routes.SCZ_WAS_2,
-                routes.BEL_WAS_2,
-                routes.BEL_LUG_2,
-                routes.PFA_SCZ_1,
-                routes.PFA_SAR_1,
-                routes.SAR_VAD_1,
-                routes.AT2_VAD_1);
-
-        var longestR = Trail.longest(routesR);
-        var longestG = Trail.longest(routesG);
-        var longestB = Trail.longest(routesB);
-
-        assertEquals(28, longestR.length());
-        assertEquals(21, longestG.length());
-        assertEquals(17, longestB.length());
-    }
-
-    @Test
-    void trailLongestWorksOnKnownExample2() {
-        var routes = new ChRoutes();
-
-        var routesR = List.of(
-                routes.BRI_LOC_1,
-                routes.BRI_SIO_1,
-                routes.MAR_SIO_1,
-                routes.LAU_MAR_1,
-                routes.GEN_LAU_1,
-                routes.GEN_YVE_1,
-                routes.LCF_YVE_1,
-                routes.DEL_LCF_1,
-                routes.DEL_SOL_1,
-                routes.OLT_SOL_1,
-                routes.BAL_OLT_1,
-                routes.BER_LUC_1,
-                routes.SCE_WIN_1);
-
-        var routesG = List.of(
-                routes.DE2_SCE_1,
-                routes.SCE_WIN_2,
-                routes.WIN_ZUR_1,
-                routes.ZOU_ZUR_1,
-                routes.SCZ_ZOU_1,
-                routes.SCZ_WAS_1,
-                routes.BEL_WAS_1,
-                routes.BEL_LUG_1,
-                routes.COI_WAS_1,
-                routes.COI_SAR_1,
-                routes.SAR_VAD_1,
-                routes.AT2_VAD_1,
-                routes.BRU_COI_1,
-                routes.BRU_IT2_1);
-
-        var routesB = List.of(
-                routes.DE4_KRE_1,
-                routes.KRE_WIN_1,
-                routes.WIN_ZUR_2,
-                routes.BAD_ZUR_1,
-                routes.ZOU_ZUR_2,
-                routes.LUC_ZOU_2,
-                routes.INT_LUC_1,
-                routes.BRI_INT_1,
-                routes.BER_INT_1,
-                routes.BER_FRI_1,
-                routes.BER_NEU_1,
-                routes.LCF_NEU_1,
-                routes.FR3_LCF_1,
-                routes.BER_SOL_1,
-                routes.BAL_DEL_1,
-                routes.BAL_DE1_1);
-
-        var longestR = Trail.longest(routesR);
-        var longestG = Trail.longest(routesG);
-        var longestB = Trail.longest(routesB);
-
-        assertEquals(35, longestR.length());
-        assertEquals(19, longestG.length());
-        assertEquals(18, longestB.length());
-    }
-
-    @Test
-    void trailLongestWorksOnKnownExample4() {
-        var routes = new ChRoutes();
-
-        var routesR = List.of(
-                routes.FRI_LAU_1,
-                routes.BER_FRI_1,
-                routes.BER_LUC_1,
-                routes.BER_INT_1,
-                routes.INT_LUC_1,
-                routes.LUC_ZOU_1,
-                routes.ZOU_ZUR_1,
-                routes.STG_ZUR_1,
-                routes.DE5_STG_1,
-                routes.AT1_STG_1,
-                routes.LUC_SCZ_1,
-                routes.SCZ_WAS_1,
-                routes.BEL_WAS_1,
-                routes.BEL_LOC_1,
-                routes.IT4_LOC_1,
-                routes.IT3_LUG_1);
-
-        var routesG = List.of(
-                routes.SCE_WIN_1,
-                routes.WIN_ZUR_1,
-                routes.OLT_ZUR_1,
-                routes.LUC_OLT_1,
-                routes.STG_WIN_1,
-                routes.STG_VAD_1,
-                routes.SAR_VAD_1,
-                routes.COI_SAR_1,
-                routes.BRU_COI_1,
-                routes.COI_WAS_1,
-                routes.BRI_WAS_1,
-                routes.BRI_INT_1,
-                routes.BRI_LOC_1,
-                routes.LOC_LUG_1,
-                routes.BEL_LUG_1);
-
-        var longestR = Trail.longest(routesR);
-        var longestG = Trail.longest(routesG);
-
-        assertEquals(31, longestR.length());
-        assertEquals(31, longestG.length());
-    }
-
-    @Test
-    void trailLongestWorksOnKnownExample5() {
-        var routes = new ChRoutes();
-
-        var routesR = List.of(
-                routes.DE2_SCE_1,
-                routes.SCE_WIN_1,
-                routes.SCE_ZUR_1,
-                routes.ZOU_ZUR_1,
-                routes.LUC_ZOU_1,
-                routes.LUC_OLT_1,
-                routes.BAL_OLT_1,
-                routes.OLT_SOL_1,
-                routes.BER_SOL_1,
-                routes.SCZ_ZOU_1,
-                routes.SCZ_WAS_1,
-                routes.BRI_WAS_1,
-                routes.COI_WAS_1,
-                routes.COI_SAR_1,
-                routes.SAR_VAD_1,
-                routes.BRU_COI_1,
-                routes.BRU_IT2_1);
-
-        var routesG = List.of(
-                routes.BAL_DE1_1,
-                routes.BAL_DEL_1,
-                routes.DEL_LCF_1,
-                routes.FR3_LCF_1,
-                routes.LCF_YVE_1,
-                routes.GEN_YVE_1,
-                routes.LCF_NEU_1,
-                routes.BER_NEU_1,
-                routes.BER_FRI_1,
-                routes.BER_LUC_1,
-                routes.LUC_SCZ_1,
-                routes.PFA_SCZ_1,
-                routes.PFA_ZUR_1,
-                routes.WIN_ZUR_1,
-                routes.STG_ZUR_1,
-                routes.KRE_STG_1,
-                routes.AT1_STG_1,
-                routes.AT2_VAD_1);
-
-        var longestR = Trail.longest(routesR);
-        var longestG = Trail.longest(routesG);
-
-        assertEquals(22, longestR.length());
-        assertEquals(28, longestG.length());
-    }
-
-    private static final class ChRoutes {
-        // Stations
-        final Station BAD = new Station(0, "Baden");
-        final Station BAL = new Station(1, "Bâle");
-        final Station BEL = new Station(2, "Bellinzone");
-        final Station BER = new Station(3, "Berne");
-        final Station BRI = new Station(4, "Brigue");
-        final Station BRU = new Station(5, "Brusio");
-        final Station COI = new Station(6, "Coire");
-        final Station DAV = new Station(7, "Davos");
-        final Station DEL = new Station(8, "Delémont");
-        final Station FRI = new Station(9, "Fribourg");
-        final Station GEN = new Station(10, "Genève");
-        final Station INT = new Station(11, "Interlaken");
-        final Station KRE = new Station(12, "Kreuzlingen");
-        final Station LAU = new Station(13, "Lausanne");
-        final Station LCF = new Station(14, "La Chaux-de-Fonds");
-        final Station LOC = new Station(15, "Locarno");
-        final Station LUC = new Station(16, "Lucerne");
-        final Station LUG = new Station(17, "Lugano");
-        final Station MAR = new Station(18, "Martigny");
-        final Station NEU = new Station(19, "Neuchâtel");
-        final Station OLT = new Station(20, "Olten");
-        final Station PFA = new Station(21, "Pfäffikon");
-        final Station SAR = new Station(22, "Sargans");
-        final Station SCE = new Station(23, "Schaffhouse");
-        final Station SCZ = new Station(24, "Schwyz");
-        final Station SIO = new Station(25, "Sion");
-        final Station SOL = new Station(26, "Soleure");
-        final Station STG = new Station(27, "Saint-Gall");
-        final Station VAD = new Station(28, "Vaduz");
-        final Station WAS = new Station(29, "Wassen");
-        final Station WIN = new Station(30, "Winterthour");
-        final Station YVE = new Station(31, "Yverdon");
-        final Station ZOU = new Station(32, "Zoug");
-        final Station ZUR = new Station(33, "Zürich");
-        final Station DE1 = new Station(34, "Allemagne");
-        final Station DE2 = new Station(35, "Allemagne");
-        final Station DE3 = new Station(36, "Allemagne");
-        final Station DE4 = new Station(37, "Allemagne");
-        final Station DE5 = new Station(38, "Allemagne");
-        final Station AT1 = new Station(39, "Autriche");
-        final Station AT2 = new Station(40, "Autriche");
-        final Station AT3 = new Station(41, "Autriche");
-        final Station IT1 = new Station(42, "Italie");
-        final Station IT2 = new Station(43, "Italie");
-        final Station IT3 = new Station(44, "Italie");
-        final Station IT4 = new Station(45, "Italie");
-        final Station IT5 = new Station(46, "Italie");
-        final Station FR1 = new Station(47, "France");
-        final Station FR2 = new Station(48, "France");
-        final Station FR3 = new Station(49, "France");
-        final Station FR4 = new Station(50, "France");
-
-        // Routes
-        final Route AT1_STG_1 = new Route("AT1_STG_1", AT1, STG, 4, Route.Level.UNDERGROUND, null);
-        final Route AT2_VAD_1 = new Route("AT2_VAD_1", AT2, VAD, 1, Route.Level.UNDERGROUND, Color.RED);
-        final Route BAD_BAL_1 = new Route("BAD_BAL_1", BAD, BAL, 3, Route.Level.UNDERGROUND, Color.RED);
-        final Route BAD_OLT_1 = new Route("BAD_OLT_1", BAD, OLT, 2, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route BAD_ZUR_1 = new Route("BAD_ZUR_1", BAD, ZUR, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route BAL_DE1_1 = new Route("BAL_DE1_1", BAL, DE1, 1, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route BAL_DEL_1 = new Route("BAL_DEL_1", BAL, DEL, 2, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route BAL_OLT_1 = new Route("BAL_OLT_1", BAL, OLT, 2, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route BEL_LOC_1 = new Route("BEL_LOC_1", BEL, LOC, 1, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route BEL_LUG_1 = new Route("BEL_LUG_1", BEL, LUG, 1, Route.Level.UNDERGROUND, Color.RED);
-        final Route BEL_LUG_2 = new Route("BEL_LUG_2", BEL, LUG, 1, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route BEL_WAS_1 = new Route("BEL_WAS_1", BEL, WAS, 4, Route.Level.UNDERGROUND, null);
-        final Route BEL_WAS_2 = new Route("BEL_WAS_2", BEL, WAS, 4, Route.Level.UNDERGROUND, null);
-        final Route BER_FRI_1 = new Route("BER_FRI_1", BER, FRI, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route BER_FRI_2 = new Route("BER_FRI_2", BER, FRI, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route BER_INT_1 = new Route("BER_INT_1", BER, INT, 3, Route.Level.OVERGROUND, Color.BLUE);
-        final Route BER_LUC_1 = new Route("BER_LUC_1", BER, LUC, 4, Route.Level.OVERGROUND, null);
-        final Route BER_LUC_2 = new Route("BER_LUC_2", BER, LUC, 4, Route.Level.OVERGROUND, null);
-        final Route BER_NEU_1 = new Route("BER_NEU_1", BER, NEU, 2, Route.Level.OVERGROUND, Color.RED);
-        final Route BER_SOL_1 = new Route("BER_SOL_1", BER, SOL, 2, Route.Level.OVERGROUND, Color.BLACK);
-        final Route BRI_INT_1 = new Route("BRI_INT_1", BRI, INT, 2, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route BRI_IT5_1 = new Route("BRI_IT5_1", BRI, IT5, 3, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route BRI_LOC_1 = new Route("BRI_LOC_1", BRI, LOC, 6, Route.Level.UNDERGROUND, null);
-        final Route BRI_SIO_1 = new Route("BRI_SIO_1", BRI, SIO, 3, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route BRI_WAS_1 = new Route("BRI_WAS_1", BRI, WAS, 4, Route.Level.UNDERGROUND, Color.RED);
-        final Route BRU_COI_1 = new Route("BRU_COI_1", BRU, COI, 5, Route.Level.UNDERGROUND, null);
-        final Route BRU_DAV_1 = new Route("BRU_DAV_1", BRU, DAV, 4, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route BRU_IT2_1 = new Route("BRU_IT2_1", BRU, IT2, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route COI_DAV_1 = new Route("COI_DAV_1", COI, DAV, 2, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route COI_SAR_1 = new Route("COI_SAR_1", COI, SAR, 1, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route COI_WAS_1 = new Route("COI_WAS_1", COI, WAS, 5, Route.Level.UNDERGROUND, null);
-        final Route DAV_AT3_1 = new Route("DAV_AT3_1", DAV, AT3, 3, Route.Level.UNDERGROUND, null);
-        final Route DAV_IT1_1 = new Route("DAV_IT1_1", DAV, IT1, 3, Route.Level.UNDERGROUND, null);
-        final Route DAV_SAR_1 = new Route("DAV_SAR_1", DAV, SAR, 3, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route DE2_SCE_1 = new Route("DE2_SCE_1", DE2, SCE, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route DE3_KRE_1 = new Route("DE3_KRE_1", DE3, KRE, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route DE4_KRE_1 = new Route("DE4_KRE_1", DE4, KRE, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route DE5_STG_1 = new Route("DE5_STG_1", DE5, STG, 2, Route.Level.OVERGROUND, null);
-        final Route DEL_FR4_1 = new Route("DEL_FR4_1", DEL, FR4, 2, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route DEL_LCF_1 = new Route("DEL_LCF_1", DEL, LCF, 3, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route DEL_SOL_1 = new Route("DEL_SOL_1", DEL, SOL, 1, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route FR1_MAR_1 = new Route("FR1_MAR_1", FR1, MAR, 2, Route.Level.UNDERGROUND, null);
-        final Route FR2_GEN_1 = new Route("FR2_GEN_1", FR2, GEN, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route FR3_LCF_1 = new Route("FR3_LCF_1", FR3, LCF, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route FRI_LAU_1 = new Route("FRI_LAU_1", FRI, LAU, 3, Route.Level.OVERGROUND, Color.RED);
-        final Route FRI_LAU_2 = new Route("FRI_LAU_2", FRI, LAU, 3, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route GEN_LAU_1 = new Route("GEN_LAU_1", GEN, LAU, 4, Route.Level.OVERGROUND, Color.BLUE);
-        final Route GEN_LAU_2 = new Route("GEN_LAU_2", GEN, LAU, 4, Route.Level.OVERGROUND, Color.WHITE);
-        final Route GEN_YVE_1 = new Route("GEN_YVE_1", GEN, YVE, 6, Route.Level.OVERGROUND, null);
-        final Route INT_LUC_1 = new Route("INT_LUC_1", INT, LUC, 4, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route IT3_LUG_1 = new Route("IT3_LUG_1", IT3, LUG, 2, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route IT4_LOC_1 = new Route("IT4_LOC_1", IT4, LOC, 2, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route KRE_SCE_1 = new Route("KRE_SCE_1", KRE, SCE, 3, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route KRE_STG_1 = new Route("KRE_STG_1", KRE, STG, 1, Route.Level.OVERGROUND, Color.GREEN);
-        final Route KRE_WIN_1 = new Route("KRE_WIN_1", KRE, WIN, 2, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route LAU_MAR_1 = new Route("LAU_MAR_1", LAU, MAR, 4, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route LAU_NEU_1 = new Route("LAU_NEU_1", LAU, NEU, 4, Route.Level.OVERGROUND, null);
-        final Route LCF_NEU_1 = new Route("LCF_NEU_1", LCF, NEU, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route LCF_YVE_1 = new Route("LCF_YVE_1", LCF, YVE, 3, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route LOC_LUG_1 = new Route("LOC_LUG_1", LOC, LUG, 1, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route LUC_OLT_1 = new Route("LUC_OLT_1", LUC, OLT, 3, Route.Level.OVERGROUND, Color.GREEN);
-        final Route LUC_SCZ_1 = new Route("LUC_SCZ_1", LUC, SCZ, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route LUC_ZOU_1 = new Route("LUC_ZOU_1", LUC, ZOU, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route LUC_ZOU_2 = new Route("LUC_ZOU_2", LUC, ZOU, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route MAR_SIO_1 = new Route("MAR_SIO_1", MAR, SIO, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route NEU_SOL_1 = new Route("NEU_SOL_1", NEU, SOL, 4, Route.Level.OVERGROUND, Color.GREEN);
-        final Route NEU_YVE_1 = new Route("NEU_YVE_1", NEU, YVE, 2, Route.Level.OVERGROUND, Color.BLACK);
-        final Route OLT_SOL_1 = new Route("OLT_SOL_1", OLT, SOL, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route OLT_ZUR_1 = new Route("OLT_ZUR_1", OLT, ZUR, 3, Route.Level.OVERGROUND, Color.WHITE);
-        final Route PFA_SAR_1 = new Route("PFA_SAR_1", PFA, SAR, 3, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route PFA_SCZ_1 = new Route("PFA_SCZ_1", PFA, SCZ, 1, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route PFA_STG_1 = new Route("PFA_STG_1", PFA, STG, 3, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route PFA_ZUR_1 = new Route("PFA_ZUR_1", PFA, ZUR, 2, Route.Level.OVERGROUND, Color.BLUE);
-        final Route SAR_VAD_1 = new Route("SAR_VAD_1", SAR, VAD, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route SCE_WIN_1 = new Route("SCE_WIN_1", SCE, WIN, 1, Route.Level.OVERGROUND, Color.BLACK);
-        final Route SCE_WIN_2 = new Route("SCE_WIN_2", SCE, WIN, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route SCE_ZUR_1 = new Route("SCE_ZUR_1", SCE, ZUR, 3, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route SCZ_WAS_1 = new Route("SCZ_WAS_1", SCZ, WAS, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route SCZ_WAS_2 = new Route("SCZ_WAS_2", SCZ, WAS, 2, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route SCZ_ZOU_1 = new Route("SCZ_ZOU_1", SCZ, ZOU, 1, Route.Level.OVERGROUND, Color.BLACK);
-        final Route SCZ_ZOU_2 = new Route("SCZ_ZOU_2", SCZ, ZOU, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route STG_VAD_1 = new Route("STG_VAD_1", STG, VAD, 2, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route STG_WIN_1 = new Route("STG_WIN_1", STG, WIN, 3, Route.Level.OVERGROUND, Color.RED);
-        final Route STG_ZUR_1 = new Route("STG_ZUR_1", STG, ZUR, 4, Route.Level.OVERGROUND, Color.BLACK);
-        final Route WIN_ZUR_1 = new Route("WIN_ZUR_1", WIN, ZUR, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route WIN_ZUR_2 = new Route("WIN_ZUR_2", WIN, ZUR, 1, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route ZOU_ZUR_1 = new Route("ZOU_ZUR_1", ZOU, ZUR, 1, Route.Level.OVERGROUND, Color.GREEN);
-        final Route ZOU_ZUR_2 = new Route("ZOU_ZUR_2", ZOU, ZUR, 1, Route.Level.OVERGROUND, Color.RED);
-    }
-}
Index: testProf/ch/epfl/tchu/game/PlayerIdTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/PlayerIdTestProf.java b/testProf/ch/epfl/tchu/game/PlayerIdTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/PlayerIdTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,20 +0,0 @@
-package ch.epfl.tchu.game;
-
-import org.junit.jupiter.api.Test;
-
-import java.util.List;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class PlayerIdTestProf {
-    @Test
-    void playerIdAllIsDefinedCorrectly() {
-        assertEquals(List.of(PlayerId.PLAYER_1, PlayerId.PLAYER_2), PlayerId.ALL);
-    }
-
-    @Test
-    void playerIdNextWorks() {
-        assertEquals(PlayerId.PLAYER_2, PlayerId.PLAYER_1.next());
-        assertEquals(PlayerId.PLAYER_1, PlayerId.PLAYER_2.next());
-    }
-}
\ No newline at end of file
Index: testProf/ch/epfl/tchu/game/PublicPlayerStateTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/PublicPlayerStateTestProf.java b/testProf/ch/epfl/tchu/game/PublicPlayerStateTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/PublicPlayerStateTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,258 +0,0 @@
-package ch.epfl.tchu.game;
-
-import ch.epfl.test.TestRandomizer;
-import org.junit.jupiter.api.Test;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Random;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
-class PublicPlayerStateTestProf {
-    private static final int TOTAL_CAR_COUNT = 40;
-
-    @Test
-    void publicPlayerStateConstructorFailsWithNegativeTicketOrCardCount() {
-        assertThrows(IllegalArgumentException.class, () -> {
-            new PublicPlayerState(-1, +1, List.of());
-        });
-        assertThrows(IllegalArgumentException.class, () -> {
-            new PublicPlayerState(+1, -1, List.of());
-        });
-    }
-
-    @Test
-    void publicPlayerStateTicketCountReturnsTicketCount() {
-        for (int t = 0; t < 10; t++) {
-            var state = new PublicPlayerState(t, 0, List.of());
-            assertEquals(t, state.ticketCount());
-        }
-    }
-
-    @Test
-    void publicPlayerStateCardCountReturnsCardCount() {
-        for (int c = 0; c < 10; c++) {
-            var state = new PublicPlayerState(0, c, List.of());
-            assertEquals(c, state.cardCount());
-        }
-    }
-
-    @Test
-    void publicPlayerStateRoutesReturnsRoutes() {
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var routes = randomRoutes(rng);
-            var state = new PublicPlayerState(0, 0, routes);
-            assertEquals(routes, state.routes());
-        }
-    }
-
-    @Test
-    void publicPlayerStateCarCountReturnsWorks() {
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var routes = randomRoutes(rng);
-            var routesLength = 0;
-            for (var route : routes) routesLength += route.length();
-
-            var state = new PublicPlayerState(0, 0, routes);
-            assertEquals(TOTAL_CAR_COUNT - routesLength, state.carCount());
-        }
-    }
-
-    @Test
-    void publicPlayerStateClaimPointsWorks() {
-        var rng = TestRandomizer.newRandom();
-        var claimPoints = new int[]{Integer.MIN_VALUE, 1, 2, 4, 7, 10, 15};
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var routes = randomRoutes(rng);
-            var points = 0;
-            for (var route : routes) points += claimPoints[route.length()];
-
-            var state = new PublicPlayerState(0, 0, routes);
-            assertEquals(points, state.claimPoints());
-        }
-    }
-
-    private static List<Route> randomRoutes(Random rng) {
-        var shuffledRoutes = new ArrayList<>(new ChRoutes().ALL_ROUTES);
-        Collections.shuffle(shuffledRoutes, rng);
-
-        var maxRoutesCount = rng.nextInt(TOTAL_CAR_COUNT);
-        var routes = new ArrayList<Route>(maxRoutesCount);
-        var routesLength = 0;
-        for (var route : shuffledRoutes.subList(0, maxRoutesCount)) {
-            var totalLength = routesLength + route.length();
-            if (totalLength <= TOTAL_CAR_COUNT) {
-                routes.add(route);
-                routesLength = totalLength;
-            }
-        }
-        return Collections.unmodifiableList(routes);
-    }
-
-    private static final class ChRoutes {
-        //region Stations
-        final Station BAD = new Station(0, "Baden");
-        final Station BAL = new Station(1, "Bâle");
-        final Station BEL = new Station(2, "Bellinzone");
-        final Station BER = new Station(3, "Berne");
-        final Station BRI = new Station(4, "Brigue");
-        final Station BRU = new Station(5, "Brusio");
-        final Station COI = new Station(6, "Coire");
-        final Station DAV = new Station(7, "Davos");
-        final Station DEL = new Station(8, "Delémont");
-        final Station FRI = new Station(9, "Fribourg");
-        final Station GEN = new Station(10, "Genève");
-        final Station INT = new Station(11, "Interlaken");
-        final Station KRE = new Station(12, "Kreuzlingen");
-        final Station LAU = new Station(13, "Lausanne");
-        final Station LCF = new Station(14, "La Chaux-de-Fonds");
-        final Station LOC = new Station(15, "Locarno");
-        final Station LUC = new Station(16, "Lucerne");
-        final Station LUG = new Station(17, "Lugano");
-        final Station MAR = new Station(18, "Martigny");
-        final Station NEU = new Station(19, "Neuchâtel");
-        final Station OLT = new Station(20, "Olten");
-        final Station PFA = new Station(21, "Pfäffikon");
-        final Station SAR = new Station(22, "Sargans");
-        final Station SCE = new Station(23, "Schaffhouse");
-        final Station SCZ = new Station(24, "Schwyz");
-        final Station SIO = new Station(25, "Sion");
-        final Station SOL = new Station(26, "Soleure");
-        final Station STG = new Station(27, "Saint-Gall");
-        final Station VAD = new Station(28, "Vaduz");
-        final Station WAS = new Station(29, "Wassen");
-        final Station WIN = new Station(30, "Winterthour");
-        final Station YVE = new Station(31, "Yverdon");
-        final Station ZOU = new Station(32, "Zoug");
-        final Station ZUR = new Station(33, "Zürich");
-        final Station DE1 = new Station(34, "Allemagne");
-        final Station DE2 = new Station(35, "Allemagne");
-        final Station DE3 = new Station(36, "Allemagne");
-        final Station DE4 = new Station(37, "Allemagne");
-        final Station DE5 = new Station(38, "Allemagne");
-        final Station AT1 = new Station(39, "Autriche");
-        final Station AT2 = new Station(40, "Autriche");
-        final Station AT3 = new Station(41, "Autriche");
-        final Station IT1 = new Station(42, "Italie");
-        final Station IT2 = new Station(43, "Italie");
-        final Station IT3 = new Station(44, "Italie");
-        final Station IT4 = new Station(45, "Italie");
-        final Station IT5 = new Station(46, "Italie");
-        final Station FR1 = new Station(47, "France");
-        final Station FR2 = new Station(48, "France");
-        final Station FR3 = new Station(49, "France");
-        final Station FR4 = new Station(50, "France");
-        //endregion
-
-        //region Routes
-        final Route AT1_STG_1 = new Route("AT1_STG_1", AT1, STG, 4, Route.Level.UNDERGROUND, null);
-        final Route AT2_VAD_1 = new Route("AT2_VAD_1", AT2, VAD, 1, Route.Level.UNDERGROUND, Color.RED);
-        final Route BAD_BAL_1 = new Route("BAD_BAL_1", BAD, BAL, 3, Route.Level.UNDERGROUND, Color.RED);
-        final Route BAD_OLT_1 = new Route("BAD_OLT_1", BAD, OLT, 2, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route BAD_ZUR_1 = new Route("BAD_ZUR_1", BAD, ZUR, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route BAL_DE1_1 = new Route("BAL_DE1_1", BAL, DE1, 1, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route BAL_DEL_1 = new Route("BAL_DEL_1", BAL, DEL, 2, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route BAL_OLT_1 = new Route("BAL_OLT_1", BAL, OLT, 2, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route BEL_LOC_1 = new Route("BEL_LOC_1", BEL, LOC, 1, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route BEL_LUG_1 = new Route("BEL_LUG_1", BEL, LUG, 1, Route.Level.UNDERGROUND, Color.RED);
-        final Route BEL_LUG_2 = new Route("BEL_LUG_2", BEL, LUG, 1, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route BEL_WAS_1 = new Route("BEL_WAS_1", BEL, WAS, 4, Route.Level.UNDERGROUND, null);
-        final Route BEL_WAS_2 = new Route("BEL_WAS_2", BEL, WAS, 4, Route.Level.UNDERGROUND, null);
-        final Route BER_FRI_1 = new Route("BER_FRI_1", BER, FRI, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route BER_FRI_2 = new Route("BER_FRI_2", BER, FRI, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route BER_INT_1 = new Route("BER_INT_1", BER, INT, 3, Route.Level.OVERGROUND, Color.BLUE);
-        final Route BER_LUC_1 = new Route("BER_LUC_1", BER, LUC, 4, Route.Level.OVERGROUND, null);
-        final Route BER_LUC_2 = new Route("BER_LUC_2", BER, LUC, 4, Route.Level.OVERGROUND, null);
-        final Route BER_NEU_1 = new Route("BER_NEU_1", BER, NEU, 2, Route.Level.OVERGROUND, Color.RED);
-        final Route BER_SOL_1 = new Route("BER_SOL_1", BER, SOL, 2, Route.Level.OVERGROUND, Color.BLACK);
-        final Route BRI_INT_1 = new Route("BRI_INT_1", BRI, INT, 2, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route BRI_IT5_1 = new Route("BRI_IT5_1", BRI, IT5, 3, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route BRI_LOC_1 = new Route("BRI_LOC_1", BRI, LOC, 6, Route.Level.UNDERGROUND, null);
-        final Route BRI_SIO_1 = new Route("BRI_SIO_1", BRI, SIO, 3, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route BRI_WAS_1 = new Route("BRI_WAS_1", BRI, WAS, 4, Route.Level.UNDERGROUND, Color.RED);
-        final Route BRU_COI_1 = new Route("BRU_COI_1", BRU, COI, 5, Route.Level.UNDERGROUND, null);
-        final Route BRU_DAV_1 = new Route("BRU_DAV_1", BRU, DAV, 4, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route BRU_IT2_1 = new Route("BRU_IT2_1", BRU, IT2, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route COI_DAV_1 = new Route("COI_DAV_1", COI, DAV, 2, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route COI_SAR_1 = new Route("COI_SAR_1", COI, SAR, 1, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route COI_WAS_1 = new Route("COI_WAS_1", COI, WAS, 5, Route.Level.UNDERGROUND, null);
-        final Route DAV_AT3_1 = new Route("DAV_AT3_1", DAV, AT3, 3, Route.Level.UNDERGROUND, null);
-        final Route DAV_IT1_1 = new Route("DAV_IT1_1", DAV, IT1, 3, Route.Level.UNDERGROUND, null);
-        final Route DAV_SAR_1 = new Route("DAV_SAR_1", DAV, SAR, 3, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route DE2_SCE_1 = new Route("DE2_SCE_1", DE2, SCE, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route DE3_KRE_1 = new Route("DE3_KRE_1", DE3, KRE, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route DE4_KRE_1 = new Route("DE4_KRE_1", DE4, KRE, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route DE5_STG_1 = new Route("DE5_STG_1", DE5, STG, 2, Route.Level.OVERGROUND, null);
-        final Route DEL_FR4_1 = new Route("DEL_FR4_1", DEL, FR4, 2, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route DEL_LCF_1 = new Route("DEL_LCF_1", DEL, LCF, 3, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route DEL_SOL_1 = new Route("DEL_SOL_1", DEL, SOL, 1, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route FR1_MAR_1 = new Route("FR1_MAR_1", FR1, MAR, 2, Route.Level.UNDERGROUND, null);
-        final Route FR2_GEN_1 = new Route("FR2_GEN_1", FR2, GEN, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route FR3_LCF_1 = new Route("FR3_LCF_1", FR3, LCF, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route FRI_LAU_1 = new Route("FRI_LAU_1", FRI, LAU, 3, Route.Level.OVERGROUND, Color.RED);
-        final Route FRI_LAU_2 = new Route("FRI_LAU_2", FRI, LAU, 3, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route GEN_LAU_1 = new Route("GEN_LAU_1", GEN, LAU, 4, Route.Level.OVERGROUND, Color.BLUE);
-        final Route GEN_LAU_2 = new Route("GEN_LAU_2", GEN, LAU, 4, Route.Level.OVERGROUND, Color.WHITE);
-        final Route GEN_YVE_1 = new Route("GEN_YVE_1", GEN, YVE, 6, Route.Level.OVERGROUND, null);
-        final Route INT_LUC_1 = new Route("INT_LUC_1", INT, LUC, 4, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route IT3_LUG_1 = new Route("IT3_LUG_1", IT3, LUG, 2, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route IT4_LOC_1 = new Route("IT4_LOC_1", IT4, LOC, 2, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route KRE_SCE_1 = new Route("KRE_SCE_1", KRE, SCE, 3, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route KRE_STG_1 = new Route("KRE_STG_1", KRE, STG, 1, Route.Level.OVERGROUND, Color.GREEN);
-        final Route KRE_WIN_1 = new Route("KRE_WIN_1", KRE, WIN, 2, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route LAU_MAR_1 = new Route("LAU_MAR_1", LAU, MAR, 4, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route LAU_NEU_1 = new Route("LAU_NEU_1", LAU, NEU, 4, Route.Level.OVERGROUND, null);
-        final Route LCF_NEU_1 = new Route("LCF_NEU_1", LCF, NEU, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route LCF_YVE_1 = new Route("LCF_YVE_1", LCF, YVE, 3, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route LOC_LUG_1 = new Route("LOC_LUG_1", LOC, LUG, 1, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route LUC_OLT_1 = new Route("LUC_OLT_1", LUC, OLT, 3, Route.Level.OVERGROUND, Color.GREEN);
-        final Route LUC_SCZ_1 = new Route("LUC_SCZ_1", LUC, SCZ, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route LUC_ZOU_1 = new Route("LUC_ZOU_1", LUC, ZOU, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route LUC_ZOU_2 = new Route("LUC_ZOU_2", LUC, ZOU, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route MAR_SIO_1 = new Route("MAR_SIO_1", MAR, SIO, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route NEU_SOL_1 = new Route("NEU_SOL_1", NEU, SOL, 4, Route.Level.OVERGROUND, Color.GREEN);
-        final Route NEU_YVE_1 = new Route("NEU_YVE_1", NEU, YVE, 2, Route.Level.OVERGROUND, Color.BLACK);
-        final Route OLT_SOL_1 = new Route("OLT_SOL_1", OLT, SOL, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route OLT_ZUR_1 = new Route("OLT_ZUR_1", OLT, ZUR, 3, Route.Level.OVERGROUND, Color.WHITE);
-        final Route PFA_SAR_1 = new Route("PFA_SAR_1", PFA, SAR, 3, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route PFA_SCZ_1 = new Route("PFA_SCZ_1", PFA, SCZ, 1, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route PFA_STG_1 = new Route("PFA_STG_1", PFA, STG, 3, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route PFA_ZUR_1 = new Route("PFA_ZUR_1", PFA, ZUR, 2, Route.Level.OVERGROUND, Color.BLUE);
-        final Route SAR_VAD_1 = new Route("SAR_VAD_1", SAR, VAD, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route SCE_WIN_1 = new Route("SCE_WIN_1", SCE, WIN, 1, Route.Level.OVERGROUND, Color.BLACK);
-        final Route SCE_WIN_2 = new Route("SCE_WIN_2", SCE, WIN, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route SCE_ZUR_1 = new Route("SCE_ZUR_1", SCE, ZUR, 3, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route SCZ_WAS_1 = new Route("SCZ_WAS_1", SCZ, WAS, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route SCZ_WAS_2 = new Route("SCZ_WAS_2", SCZ, WAS, 2, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route SCZ_ZOU_1 = new Route("SCZ_ZOU_1", SCZ, ZOU, 1, Route.Level.OVERGROUND, Color.BLACK);
-        final Route SCZ_ZOU_2 = new Route("SCZ_ZOU_2", SCZ, ZOU, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route STG_VAD_1 = new Route("STG_VAD_1", STG, VAD, 2, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route STG_WIN_1 = new Route("STG_WIN_1", STG, WIN, 3, Route.Level.OVERGROUND, Color.RED);
-        final Route STG_ZUR_1 = new Route("STG_ZUR_1", STG, ZUR, 4, Route.Level.OVERGROUND, Color.BLACK);
-        final Route WIN_ZUR_1 = new Route("WIN_ZUR_1", WIN, ZUR, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route WIN_ZUR_2 = new Route("WIN_ZUR_2", WIN, ZUR, 1, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route ZOU_ZUR_1 = new Route("ZOU_ZUR_1", ZOU, ZUR, 1, Route.Level.OVERGROUND, Color.GREEN);
-        final Route ZOU_ZUR_2 = new Route("ZOU_ZUR_2", ZOU, ZUR, 1, Route.Level.OVERGROUND, Color.RED);
-
-        final List<Route> ALL_ROUTES = List.of(
-                AT1_STG_1, AT2_VAD_1, BAD_BAL_1, BAD_OLT_1, BAD_ZUR_1, BAL_DE1_1, BAL_DEL_1,
-                BAL_OLT_1, BEL_LOC_1, BEL_LUG_1, BEL_LUG_2, BEL_WAS_1, BEL_WAS_2, BER_FRI_1,
-                BER_FRI_2, BER_INT_1, BER_LUC_1, BER_LUC_2, BER_NEU_1, BER_SOL_1, BRI_INT_1,
-                BRI_IT5_1, BRI_LOC_1, BRI_SIO_1, BRI_WAS_1, BRU_COI_1, BRU_DAV_1, BRU_IT2_1,
-                COI_DAV_1, COI_SAR_1, COI_WAS_1, DAV_AT3_1, DAV_IT1_1, DAV_SAR_1, DE2_SCE_1,
-                DE3_KRE_1, DE4_KRE_1, DE5_STG_1, DEL_FR4_1, DEL_LCF_1, DEL_SOL_1, FR1_MAR_1,
-                FR2_GEN_1, FR3_LCF_1, FRI_LAU_1, FRI_LAU_2, GEN_LAU_1, GEN_LAU_2, GEN_YVE_1,
-                INT_LUC_1, IT3_LUG_1, IT4_LOC_1, KRE_SCE_1, KRE_STG_1, KRE_WIN_1, LAU_MAR_1,
-                LAU_NEU_1, LCF_NEU_1, LCF_YVE_1, LOC_LUG_1, LUC_OLT_1, LUC_SCZ_1, LUC_ZOU_1,
-                LUC_ZOU_2, MAR_SIO_1, NEU_SOL_1, NEU_YVE_1, OLT_SOL_1, OLT_ZUR_1, PFA_SAR_1,
-                PFA_SCZ_1, PFA_STG_1, PFA_ZUR_1, SAR_VAD_1, SCE_WIN_1, SCE_WIN_2, SCE_ZUR_1,
-                SCZ_WAS_1, SCZ_WAS_2, SCZ_ZOU_1, SCZ_ZOU_2, STG_VAD_1, STG_WIN_1, STG_ZUR_1,
-                WIN_ZUR_1, WIN_ZUR_2, ZOU_ZUR_1, ZOU_ZUR_2);
-        //endregion
-    }
-}
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
-# Editor-based HTTP Client requests
-/httpRequests/
Index: .idea/codeStyles/Project.xml
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
deleted file mode 100644
--- a/.idea/codeStyles/Project.xml	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,25 +0,0 @@
-<component name="ProjectCodeStyleConfiguration">
-  <code_scheme name="Project" version="173">
-    <JetCodeStyleSettings>
-      <option name="PACKAGES_TO_USE_STAR_IMPORTS">
-        <value>
-          <package name="java.util" alias="false" withSubpackages="false" />
-          <package name="kotlinx.android.synthetic" alias="false" withSubpackages="true" />
-          <package name="io.ktor" alias="false" withSubpackages="true" />
-        </value>
-      </option>
-      <option name="PACKAGES_IMPORT_LAYOUT">
-        <value>
-          <package name="" alias="false" withSubpackages="true" />
-          <package name="java" alias="false" withSubpackages="true" />
-          <package name="javax" alias="false" withSubpackages="true" />
-          <package name="kotlin" alias="false" withSubpackages="true" />
-          <package name="" alias="true" withSubpackages="true" />
-        </value>
-      </option>
-    </JetCodeStyleSettings>
-    <ScalaCodeStyleSettings>
-      <option name="MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE" value="true" />
-    </ScalaCodeStyleSettings>
-  </code_scheme>
-</component>
\ No newline at end of file
Index: testProf/ch/epfl/tchu/gui/InfoTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/gui/InfoTestProf.java b/testProf/ch/epfl/tchu/gui/InfoTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/gui/InfoTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,274 +0,0 @@
-package ch.epfl.tchu.gui;
-
-import ch.epfl.tchu.SortedBag;
-import ch.epfl.tchu.game.*;
-import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Test;
-
-import java.io.IOException;
-import java.util.List;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
-class InfoTestProf {
-
-
-    @Test
-    void infoCardNameWorks() {
-        var actualK1 = Info.cardName(Card.BLACK, 1);
-        var expectedK1 = "noire";
-        assertEquals(expectedK1, actualK1);
-        var actualK9 = Info.cardName(Card.BLACK, 9);
-        var expectedK9 = "noires";
-        assertEquals(expectedK9, actualK9);
-
-        var actualB1 = Info.cardName(Card.BLUE, 1);
-        var expectedB1 = "bleue";
-        assertEquals(expectedB1, actualB1);
-        var actualB9 = Info.cardName(Card.BLUE, 9);
-        var expectedB9 = "bleues";
-        assertEquals(expectedB9, actualB9);
-
-        var actualG1 = Info.cardName(Card.GREEN, 1);
-        var expectedG1 = "verte";
-        assertEquals(expectedG1, actualG1);
-        var actualG9 = Info.cardName(Card.GREEN, 9);
-        var expectedG9 = "vertes";
-        assertEquals(expectedG9, actualG9);
-
-        var actualO1 = Info.cardName(Card.ORANGE, 1);
-        var expectedO1 = "orange";
-        assertEquals(expectedO1, actualO1);
-        var actualO9 = Info.cardName(Card.ORANGE, 9);
-        var expectedO9 = "oranges";
-        assertEquals(expectedO9, actualO9);
-
-        var actualR1 = Info.cardName(Card.RED, 1);
-        var expectedR1 = "rouge";
-        assertEquals(expectedR1, actualR1);
-        var actualR9 = Info.cardName(Card.RED, 9);
-        var expectedR9 = "rouges";
-        assertEquals(expectedR9, actualR9);
-
-        var actualV1 = Info.cardName(Card.VIOLET, 1);
-        var expectedV1 = "violette";
-        assertEquals(expectedV1, actualV1);
-        var actualV9 = Info.cardName(Card.VIOLET, 9);
-        var expectedV9 = "violettes";
-        assertEquals(expectedV9, actualV9);
-
-        var actualW1 = Info.cardName(Card.WHITE, 1);
-        var expectedW1 = "blanche";
-        assertEquals(expectedW1, actualW1);
-        var actualW9 = Info.cardName(Card.WHITE, 9);
-        var expectedW9 = "blanches";
-        assertEquals(expectedW9, actualW9);
-
-        var actualY1 = Info.cardName(Card.YELLOW, 1);
-        var expectedY1 = "jaune";
-        assertEquals(expectedY1, actualY1);
-        var actualY9 = Info.cardName(Card.YELLOW, 9);
-        var expectedY9 = "jaunes";
-        assertEquals(expectedY9, actualY9);
-
-        var actualL1 = Info.cardName(Card.LOCOMOTIVE, 1);
-        var expectedL1 = "locomotive";
-        assertEquals(expectedL1, actualL1);
-        var actualL9 = Info.cardName(Card.LOCOMOTIVE, 9);
-        var expectedL9 = "locomotives";
-        assertEquals(expectedL9, actualL9);
-    }
-
-    @Test
-    void infoDrawWorks() {
-        var actual = Info.draw(List.of("Ada", "Ada"), 17);
-        var expected = "\nAda et Ada sont ex æqo avec 17 points !\n";
-        assertEquals(expected, actual);
-    }
-
-    @Test
-    void infoWillPlayFirstWorks() {
-        var info = new Info("Niklaus");
-        var actual = info.willPlayFirst();
-        var expected = "Niklaus jouera en premier.\n\n";
-        assertEquals(expected, actual);
-    }
-
-    @Test
-    void infoKeptTicketsWorks() {
-        var info = new Info("Edsger");
-
-        var actual1 = info.keptTickets(1);
-        var expected1 = "Edsger a gardé 1 billet.\n";
-        assertEquals(expected1, actual1);
-
-        var actual5 = info.keptTickets(5);
-        var expected5 = "Edsger a gardé 5 billets.\n";
-        assertEquals(expected5, actual5);
-    }
-
-    @Test
-    void infoCanPlayWorks() {
-        var info = new Info("Charles");
-
-        var actual = info.canPlay();
-        var expected = "\nC'est à Charles de jouer.\n";
-        assertEquals(expected, actual);
-    }
-
-    @Test
-    void infoDrewTicketsWorks() {
-        var info = new Info("Linus");
-
-        var actual1 = info.drewTickets(1);
-        var expected1 = "Linus a tiré 1 billet...\n";
-        assertEquals(expected1, actual1);
-
-        var actual5 = info.drewTickets(5);
-        var expected5 = "Linus a tiré 5 billets...\n";
-        assertEquals(expected5, actual5);
-    }
-
-    @Test
-    void infoDrewBlindCardWorks() {
-        var info = new Info("Alan");
-
-        var actual = info.drewBlindCard();
-        var expected = "Alan a tiré une carte de la pioche.\n";
-        assertEquals(expected, actual);
-    }
-
-    @Test
-    void infoDrewVisibleCardWorks() {
-        var info = new Info("John");
-
-        var actual = info.drewVisibleCard(Card.GREEN);
-        var expected = "John a tiré une carte verte visible.\n";
-        assertEquals(expected, actual);
-    }
-
-    @Test
-    void infoClaimedRouteWorks() {
-        var info = new Info("Brian");
-
-        var s1 = new Station(0, "Neuchâtel");
-        var s2 = new Station(1, "Lausanne");
-
-        var route1 = new Route("1", s1, s2, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        var actual1 = info.claimedRoute(route1, SortedBag.of(Card.ORANGE));
-        var expected1 = "Brian a pris possession de la route Neuchâtel – Lausanne au moyen de 1 orange.\n";
-        assertEquals(expected1, actual1);
-
-        var route2 = new Route("1", s1, s2, 2, Route.Level.OVERGROUND, null);
-        var actual2 = info.claimedRoute(route2, SortedBag.of(2, Card.RED));
-        var expected2 = "Brian a pris possession de la route Neuchâtel – Lausanne au moyen de 2 rouges.\n";
-        assertEquals(expected2, actual2);
-
-        var route3 = new Route("1", s1, s2, 4, Route.Level.UNDERGROUND, null);
-        var actual3 = info.claimedRoute(route3, SortedBag.of(4, Card.BLUE, 2, Card.LOCOMOTIVE));
-        var expected3 = "Brian a pris possession de la route Neuchâtel – Lausanne au moyen de 4 bleues et 2 locomotives.\n";
-        assertEquals(expected3, actual3);
-    }
-
-    @Test
-    void infoAttemptsTunnelClaimWorks() {
-        var info = new Info("Grace");
-
-        var s1 = new Station(0, "Wassen");
-        var s2 = new Station(1, "Coire");
-
-        var route1 = new Route("1", s1, s2, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        var actual1 = info.attemptsTunnelClaim(route1, SortedBag.of(Card.ORANGE));
-        var expected1 = "Grace tente de s'emparer du tunnel Wassen – Coire au moyen de 1 orange !\n";
-        assertEquals(expected1, actual1);
-
-        var route2 = new Route("1", s1, s2, 2, Route.Level.UNDERGROUND, null);
-        var actual2 = info.attemptsTunnelClaim(route2, SortedBag.of(2, Card.RED));
-        var expected2 = "Grace tente de s'emparer du tunnel Wassen – Coire au moyen de 2 rouges !\n";
-        assertEquals(expected2, actual2);
-
-        var route3 = new Route("1", s1, s2, 4, Route.Level.UNDERGROUND, null);
-        var actual3 = info.attemptsTunnelClaim(route3, SortedBag.of(4, Card.BLUE, 2, Card.LOCOMOTIVE));
-        var expected3 = "Grace tente de s'emparer du tunnel Wassen – Coire au moyen de 4 bleues et 2 locomotives !\n";
-        assertEquals(expected3, actual3);
-    }
-
-    @Test
-    void infoDrewAdditionalCardsWorks() {
-        var info = new Info("Margaret");
-
-        var actual1 = info.drewAdditionalCards(SortedBag.of(3, Card.ORANGE), 0);
-        var expected1 = "Les cartes supplémentaires sont 3 oranges. Elles n'impliquent aucun coût additionnel.\n";
-        assertEquals(expected1, actual1);
-
-        var actual2 = info.drewAdditionalCards(SortedBag.of(1, Card.WHITE, 2, Card.RED), 1);
-        var expected2 = "Les cartes supplémentaires sont 2 rouges et 1 blanche. Elles impliquent un coût additionnel de 1 carte.\n";
-        assertEquals(expected2, actual2);
-
-        var actual3 = info.drewAdditionalCards(SortedBag.of(1, Card.YELLOW, 2, Card.GREEN), 2);
-        var expected3 = "Les cartes supplémentaires sont 2 vertes et 1 jaune. Elles impliquent un coût additionnel de 2 cartes.\n";
-        assertEquals(expected3, actual3);
-
-        var actual4 = info.drewAdditionalCards(SortedBag.of(1, Card.VIOLET, 2, Card.LOCOMOTIVE), 3);
-        var expected4 = "Les cartes supplémentaires sont 1 violette et 2 locomotives. Elles impliquent un coût additionnel de 3 cartes.\n";
-        assertEquals(expected4, actual4);
-    }
-
-    @Test
-    void infoDidNotClaimRouteWorks() {
-        var info = new Info("Guido");
-        var s1 = new Station(0, "Zernez");
-        var s2 = new Station(1, "Klosters");
-
-        var route = new Route("1", s1, s2, 4, Route.Level.UNDERGROUND, Color.ORANGE);
-        var actual = info.didNotClaimRoute(route);
-        var expected = "Guido n'a pas pu (ou voulu) s'emparer de la route Zernez – Klosters.\n";
-        assertEquals(expected, actual);
-    }
-
-    @Test
-    void infoLastTurnBeginsWorks() {
-        var info = new Info("Martin");
-
-        var actual1 = info.lastTurnBegins(0);
-        var expected1 = "\nMartin n'a plus que 0 wagons, le dernier tour commence !\n";
-        assertEquals(expected1, actual1);
-
-        var actual2 = info.lastTurnBegins(1);
-        var expected2 = "\nMartin n'a plus que 1 wagon, le dernier tour commence !\n";
-        assertEquals(expected2, actual2);
-
-        var actual3 = info.lastTurnBegins(2);
-        var expected3 = "\nMartin n'a plus que 2 wagons, le dernier tour commence !\n";
-        assertEquals(expected3, actual3);
-    }
-
-    @Test
-    void infoGetsLongestTrailBonusWorks() {
-        var info = new Info("Larry");
-
-        var s1 = new Station(0, "Montreux");
-        var s2 = new Station(1, "Montreux");
-
-        var route = new Route("1", s1, s2, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        var trail = Trail.longest(List.of(route));
-
-        var actual = info.getsLongestTrailBonus(trail);
-        var expected = "\nLarry reçoit un bonus de 10 points pour le plus long trajet (Montreux – Montreux).\n";
-        assertEquals(expected, actual);
-    }
-
-    @Test
-    void infoWonWorks() {
-        var info = new Info("Bjarne");
-
-        var actual1 = info.won(2, 1);
-        var expected1 = "\nBjarne remporte la victoire avec 2 points, contre 1 point !\n";
-        assertEquals(expected1, actual1);
-
-        var actual2 = info.won(3, 2);
-        var expected2 = "\nBjarne remporte la victoire avec 3 points, contre 2 points !\n";
-        assertEquals(expected2, actual2);
-    }
-}
Index: .idea/libraries/org_junit_jupiter_junit_jupiter_5_7_0.xml
===================================================================
diff --git a/.idea/libraries/org_junit_jupiter_junit_jupiter_5_7_0.xml b/.idea/libraries/org_junit_jupiter_junit_jupiter_5_7_0.xml
deleted file mode 100644
--- a/.idea/libraries/org_junit_jupiter_junit_jupiter_5_7_0.xml	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,17 +0,0 @@
-<component name="libraryTable">
-  <library name="org.junit.jupiter:junit-jupiter:5.7.0" type="repository">
-    <properties maven-id="org.junit.jupiter:junit-jupiter:5.7.0" />
-    <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar!/" />
-      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar!/" />
-      <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/" />
-      <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
-      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar!/" />
-      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar!/" />
-      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar!/" />
-      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar!/" />
-    </CLASSES>
-    <JAVADOC />
-    <SOURCES />
-  </library>
-</component>
\ No newline at end of file
Index: testProf/ch/epfl/tchu/game/TripTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/TripTestProf.java b/testProf/ch/epfl/tchu/game/TripTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/TripTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,110 +0,0 @@
-package ch.epfl.tchu.game;
-
-import ch.epfl.test.TestRandomizer;
-import org.junit.jupiter.api.Test;
-
-import java.util.List;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class TripTestProf {
-    @Test
-    void allWorksOnKnownExample() {
-        var from = List.of(
-                new Station(0, "Lausanne"),
-                new Station(1, "Neuchâtel"));
-        var to = List.of(
-                new Station(2, "Berne"),
-                new Station(3, "Zürich"),
-                new Station(4, "Coire"));
-        var points = 17;
-
-        var expectedFromToIds = new int[][]{
-                new int[]{0, 2},
-                new int[]{0, 3},
-                new int[]{0, 4},
-                new int[]{1, 2},
-                new int[]{1, 3},
-                new int[]{1, 4},
-        };
-        var all = Trip.all(from, to, points);
-        assertEquals(from.size() * to.size(), all.size());
-        outer: for (var expectedFromToId : expectedFromToIds) {
-            var fromId = expectedFromToId[0];
-            var toId = expectedFromToId[1];
-            for (var trip : all) {
-                if (trip.from().id() == fromId && trip.to().id() == toId)
-                    continue outer;
-            }
-            fail(String.format("Missing trip from %s to %s", fromId, toId));
-        }
-    }
-
-    @Test
-    void constructorFailsWithNullStations() {
-        assertThrows(NullPointerException.class, () -> {
-            new Trip(null, new Station(1, "Lausanne"), 1);
-        });
-        assertThrows(NullPointerException.class, () -> {
-            new Trip(new Station(1, "Lausanne"), null, 1);
-        });
-    }
-
-    @Test
-    void constructorFailsWithInvalidPoints() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        assertThrows(IllegalArgumentException.class, () -> {
-            new Trip(s1, s2, 0);
-        });
-        assertThrows(IllegalArgumentException.class, () -> {
-            new Trip(s1, s2, -1);
-        });
-    }
-
-    @Test
-    void fromToAndPointsReturnWhatTheyShould() {
-        var rng = TestRandomizer.newRandom();
-        for (var i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var fromId = rng.nextInt(100);
-            var from = new Station(fromId, "Lausanne");
-            var to = new Station(fromId + 1, "Neuchâtel");
-            var points = 1 + rng.nextInt(10);
-            var trip = new Trip(from, to, points);
-            assertEquals(from, trip.from());
-            assertEquals(to, trip.to());
-            assertEquals(points, trip.points());
-        }
-    }
-
-    @Test
-    void pointsReturnsPositivePointsWhenConnectedAndNegativePointsOtherwise() {
-        var connected = new FullConnectivity();
-        var notConnected = new NoConnectivity();
-
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var fromId = rng.nextInt(100);
-            var from = new Station(fromId, "Lugano");
-            var to = new Station(fromId + 1, "Wassen");
-            var points = 1 + rng.nextInt(10);
-            var trip = new Trip(from, to, points);
-            assertEquals(+points, trip.points(connected));
-            assertEquals(-points, trip.points(notConnected));
-        }
-    }
-
-    private static final class FullConnectivity implements StationConnectivity {
-        @Override
-        public boolean connected(Station s1, Station s2) {
-            return true;
-        }
-    }
-
-    private static final class NoConnectivity implements StationConnectivity {
-        @Override
-        public boolean connected(Station s1, Station s2) {
-            return false;
-        }
-    }
-}
\ No newline at end of file
Index: testProf/ch/epfl/tchu/game/StationTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/StationTestProf.java b/testProf/ch/epfl/tchu/game/StationTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/StationTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,56 +0,0 @@
-package ch.epfl.tchu.game;
-
-import ch.epfl.test.TestRandomizer;
-import org.junit.jupiter.api.Test;
-
-import java.util.Random;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
-class StationTestProf {
-    @Test
-    void stationConstructorFailsForNegativeId() {
-        assertThrows(IllegalArgumentException.class, () -> {
-            new Station(-1, "Lausanne");
-        });
-    }
-
-    @Test
-    void idAccessorWorks() {
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var id = rng.nextInt(Integer.MAX_VALUE);
-            var station = new Station(id, "Lausanne");
-            assertEquals(id, station.id());
-        }
-    }
-
-    private static final String alphabet = "abcdefghijklmnopqrstuvwxyz";
-    private static String randomName(Random rng, int length) {
-        var sb = new StringBuilder();
-        for (int i = 0; i < length; i++)
-            sb.append(alphabet.charAt(rng.nextInt(alphabet.length())));
-        return sb.toString();
-    }
-
-    @Test
-    void nameAccessorWorks() {
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var name = randomName(rng, 1 + rng.nextInt(10));
-            var station = new Station(1, name);
-            assertEquals(name, station.name());
-        }
-    }
-
-    @Test
-    void stationToStringReturnsName() {
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var name = randomName(rng, 1 + rng.nextInt(10));
-            var station = new Station(1, name);
-            assertEquals(name, station.toString());
-        }
-    }
-}
\ No newline at end of file
Index: testProf/ch/epfl/tchu/game/GameStateTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/GameStateTestProf.java b/testProf/ch/epfl/tchu/game/GameStateTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/GameStateTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,744 +0,0 @@
-package ch.epfl.tchu.game;
-
-import ch.epfl.tchu.SortedBag;
-import ch.epfl.test.TestRandomizer;
-import org.junit.jupiter.api.Test;
-
-import java.util.*;
-
-import static ch.epfl.tchu.game.PlayerId.PLAYER_1;
-import static ch.epfl.tchu.game.PlayerId.PLAYER_2;
-import static org.junit.jupiter.api.Assertions.*;
-
-class GameStateTestProf {
-    private static final int INITIAL_CARD_DECK_SIZE =
-            (8 * 12 + 14) - 5 - 2 * 4;
-
-    @Test
-    void gameStateInitialCreatesCorrectInitialState() {
-        var allCards = allCards();
-        var allTickets = SortedBag.of(new ChMap().ALL_TICKETS);
-
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i < 10; i++) {
-            var gameState = GameState.initial(allTickets, rng);
-
-            var allGameCardsB = new SortedBag.Builder<Card>();
-            for (int slot : List.of(0, 1, 2, 3, 4))
-                allGameCardsB.add(gameState.cardState().faceUpCard(slot));
-            for (var gs = gameState; !gs.cardState().isDeckEmpty(); gs = gs.withoutTopCard())
-                allGameCardsB.add(gs.topCard());
-            allGameCardsB.add(gameState.playerState(PLAYER_1).cards());
-            allGameCardsB.add(gameState.playerState(PLAYER_2).cards());
-            var allGameCards = allGameCardsB.build();
-
-            assertEquals(allCards, allGameCards);
-            assertEquals(allTickets, gameState.topTickets(allTickets.size()));
-            assertEquals(INITIAL_CARD_DECK_SIZE, gameState.cardState().deckSize());
-            assertEquals(0, gameState.cardState().discardsSize());
-            assertEquals(List.of(), gameState.claimedRoutes());
-            assertNull(gameState.lastPlayer());
-            assertNotNull(gameState.currentPlayerId());
-            for (PlayerId id : PlayerId.values()) {
-                var playerState = gameState.playerState(id);
-                assertEquals(List.of(), playerState.routes());
-                assertEquals(SortedBag.of(), playerState.tickets());
-                assertEquals(0, playerState.ticketCount());
-                assertEquals(4, playerState.cardCount());
-                assertEquals(40, playerState.carCount());
-                assertEquals(0, playerState.claimPoints());
-            }
-        }
-    }
-
-    @Test
-    void gameStateInitialChoosesFirstPlayerRandomly() {
-        var allTickets = SortedBag.of(new ChMap().ALL_TICKETS);
-
-        var rng = TestRandomizer.newRandom();
-        var firstPlayers = EnumSet.noneOf(PlayerId.class);
-        for (int i = 0; i < 100; i++) {
-            var gameState = GameState.initial(allTickets, rng);
-            firstPlayers.add(gameState.currentPlayerId());
-        }
-        assertEquals(Set.of(PLAYER_1, PLAYER_2), firstPlayers);
-    }
-
-    @Test
-    void gameStateInitialShufflesTickets() {
-        var allTickets = SortedBag.of(new ChMap().ALL_TICKETS);
-        var ticketsPermutations = new HashSet<List<Ticket>>();
-        var iterations = 10;
-
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i < iterations; i++) {
-            var gameState = GameState.initial(allTickets, rng);
-
-            var tickets = new ArrayList<Ticket>(allTickets.size());
-            var prevTopTickets = SortedBag.<Ticket>of();
-            for (int j = 0; j <= allTickets.size(); j++) {
-                var topTickets = gameState.topTickets(j);
-                tickets.addAll(topTickets.difference(prevTopTickets).toList());
-                prevTopTickets = topTickets;
-            }
-            ticketsPermutations.add(Collections.unmodifiableList(tickets));
-        }
-
-        assertEquals(iterations, ticketsPermutations.size());
-    }
-
-    @Test
-    void gameStateCurrentPlayerStateReturnsCurrentPlayerState() {
-        var allTickets = SortedBag.of(new ChMap().ALL_TICKETS);
-
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i < 100; i++) {
-            var gameState = GameState.initial(allTickets, rng);
-            var currentPlayer = gameState.currentPlayerId();
-            assertEquals(gameState.playerState(currentPlayer), gameState.currentPlayerState());
-        }
-    }
-
-    @Test
-    void gameStateTopTicketsFailsWithIncorrectNumberOfTickets() {
-        var allTickets = SortedBag.of(new ChMap().ALL_TICKETS);
-        var ticketsCount = allTickets.size();
-        var gameState = GameState.initial(allTickets, TestRandomizer.newRandom());
-
-        for (var c : List.of(-1, ticketsCount + 1, ticketsCount + 2, ticketsCount + 3)) {
-            assertThrows(IllegalArgumentException.class, () -> {
-                gameState.topTickets(c);
-            });
-        }
-    }
-
-    @Test
-    void gameStateTopTicketsReturnsTopTickets() {
-        var allTickets = new ArrayList<>(new ChMap().ALL_TICKETS);
-        Collections.shuffle(allTickets, TestRandomizer.newRandom());
-
-        var rng = TestRandomizer.newRandom();
-        for (int lastI = 1; lastI <= allTickets.size(); lastI++) {
-            var partialTickets = SortedBag.of(allTickets.subList(0, lastI));
-            var gameState = GameState.initial(partialTickets, rng);
-
-            var tickets = new SortedBag.Builder<Ticket>();
-            var prevTopTickets = SortedBag.<Ticket>of();
-            for (int i = 1; i <= lastI; i++) {
-                var topTickets = gameState.topTickets(i);
-                tickets.add(topTickets.difference(prevTopTickets));
-                prevTopTickets = topTickets;
-            }
-            assertEquals(partialTickets, tickets.build());
-        }
-    }
-
-    @Test
-    void gameStateWithoutTopTicketsFailsWithIncorrectNumberOfTickets() {
-        var allTickets = SortedBag.of(new ChMap().ALL_TICKETS);
-        var ticketsCount = allTickets.size();
-        var gameState = GameState.initial(allTickets, TestRandomizer.newRandom());
-
-        for (var c : List.of(-1, ticketsCount + 1, ticketsCount + 2, ticketsCount + 3)) {
-            assertThrows(IllegalArgumentException.class, () -> {
-                gameState.withoutTopTickets(c);
-            });
-        }
-    }
-
-    @Test
-    void gameStateWithoutTopTicketsRemovesTopTickets() {
-        var allTickets = new ArrayList<>(new ChMap().ALL_TICKETS);
-
-        var rng = TestRandomizer.newRandom();
-        for (int i = 0; i <= 5; i++) {
-            Collections.shuffle(allTickets, rng);
-            var subTickets = SortedBag.of(allTickets.subList(0, 32));
-            var gameState = GameState.initial(subTickets, rng);
-
-            var batchSize = 1 << i;
-            var ticketsB = new SortedBag.Builder<Ticket>();
-            for (int j = 0; j < 32; j += batchSize) {
-                ticketsB.add(gameState.topTickets(batchSize));
-                gameState = gameState.withoutTopTickets(batchSize);
-            }
-            assertEquals(subTickets, ticketsB.build());
-        }
-    }
-
-    @Test
-    void gameStateTopCardFailsWhenDeckIsEmpty() {
-        var gameState = GameState.initial(SortedBag.of(), TestRandomizer.newRandom());
-        for (int i = 0; i < INITIAL_CARD_DECK_SIZE; i++) gameState = gameState.withoutTopCard();
-        var gameStateWithNoCards = gameState;
-        assertThrows(IllegalArgumentException.class, gameStateWithNoCards::topCard);
-    }
-
-    @Test
-    void gameStateWithoutTopCardFailsWhenDeckIsEmpty() {
-        var gameState = GameState.initial(SortedBag.of(), TestRandomizer.newRandom());
-        for (int i = 0; i < INITIAL_CARD_DECK_SIZE; i++) gameState = gameState.withoutTopCard();
-        var gameStateWithNoCards = gameState;
-        assertThrows(IllegalArgumentException.class, gameStateWithNoCards::withoutTopCard);
-    }
-
-    @Test
-    void gameStateWithMoreDiscardedCardsWorks() {
-        var gameState = GameState.initial(SortedBag.of(), TestRandomizer.newRandom());
-        assertEquals(0, gameState.cardState().discardsSize());
-        gameState = gameState.withMoreDiscardedCards(SortedBag.of(1, Card.RED));
-        assertEquals(1, gameState.cardState().discardsSize());
-        gameState = gameState.withMoreDiscardedCards(SortedBag.of(2, Card.BLUE));
-        assertEquals(3, gameState.cardState().discardsSize());
-        gameState = gameState.withMoreDiscardedCards(SortedBag.of(4, Card.WHITE));
-        assertEquals(7, gameState.cardState().discardsSize());
-        gameState = gameState.withMoreDiscardedCards(SortedBag.of(8, Card.LOCOMOTIVE));
-        assertEquals(15, gameState.cardState().discardsSize());
-    }
-
-    @Test
-    void gameStateWithCardDeckRecreatedIfNeededWorks() {
-        var rng = TestRandomizer.newRandom();
-        var gameState = GameState.initial(SortedBag.of(), rng);
-        for (int i = 0; i < INITIAL_CARD_DECK_SIZE; i++) {
-            var topCard = gameState.topCard();
-            gameState = gameState
-                    .withCardsDeckRecreatedIfNeeded(rng) // deck not empty, shouldn't do anything
-                    .withoutTopCard()
-                    .withMoreDiscardedCards(SortedBag.of(topCard));
-        }
-        assertTrue(gameState.cardState().isDeckEmpty());
-        assertEquals(INITIAL_CARD_DECK_SIZE, gameState.cardState().discardsSize());
-
-        gameState = gameState.withCardsDeckRecreatedIfNeeded(rng);
-        assertEquals(INITIAL_CARD_DECK_SIZE, gameState.cardState().deckSize());
-        assertEquals(0, gameState.cardState().discardsSize());
-
-        var allGameCardsB = new SortedBag.Builder<Card>();
-        for (int slot : List.of(0, 1, 2, 3, 4))
-            allGameCardsB.add(gameState.cardState().faceUpCard(slot));
-        for (var gs = gameState; !gs.cardState().isDeckEmpty(); gs = gs.withoutTopCard())
-            allGameCardsB.add(gs.topCard());
-        allGameCardsB.add(gameState.playerState(PLAYER_1).cards());
-        allGameCardsB.add(gameState.playerState(PLAYER_2).cards());
-        assertEquals(allCards(), allGameCardsB.build());
-    }
-
-    @Test
-    void gameStateWithInitiallyChosenTicketsFailsIfPlayerAlreadyHasTickets() {
-        var tickets = new ChMap().ALL_TICKETS;
-        var ticketsBag = SortedBag.of(tickets.subList(20, tickets.size()));
-        var gameState = GameState.initial(ticketsBag, TestRandomizer.newRandom());
-        for (PlayerId id : List.of(PLAYER_1, PLAYER_2)) {
-            var i = id.ordinal();
-            var playerTickets = SortedBag.of(tickets.subList(i * 5, (i + 1) * 5));
-            gameState = gameState.withInitiallyChosenTickets(id, playerTickets);
-        }
-        var initialGameState = gameState;
-        for (PlayerId id : List.of(PLAYER_1, PLAYER_2)) {
-            var i = 2 + id.ordinal();
-            var playerTickets = SortedBag.of(tickets.subList(i * 5, (i + 1) * 5));
-            assertThrows(IllegalArgumentException.class, () -> {
-                initialGameState.withInitiallyChosenTickets(id, playerTickets);
-            });
-        }
-    }
-
-    @Test
-    void gameStateWithInitiallyChosenTicketsWorks() {
-        var tickets = new ChMap().ALL_TICKETS;
-        var tickets1 = SortedBag.of(tickets.subList(0, 5));
-        var tickets2 = SortedBag.of(tickets.subList(5, 10));
-        var ticketsBag = SortedBag.of(tickets.subList(10, tickets.size()));
-        var gameState = GameState.initial(ticketsBag, TestRandomizer.newRandom());
-
-        gameState = gameState.withInitiallyChosenTickets(PLAYER_1, tickets1);
-        gameState = gameState.withInitiallyChosenTickets(PLAYER_2, tickets2);
-
-        assertEquals(tickets1, gameState.playerState(PLAYER_1).tickets());
-        assertEquals(tickets2, gameState.playerState(PLAYER_2).tickets());
-        assertEquals(ticketsBag, gameState.topTickets(gameState.ticketsCount()));
-    }
-
-    @Test
-    void gameStateWithChosenAdditionalTicketsFailsIfDrawnTicketsDoesNotContainChosenOnes() {
-        var rng = TestRandomizer.newRandom();
-        var tickets = new ArrayList<>(new ChMap().ALL_TICKETS);
-        var gameState = GameState.initial(SortedBag.of(tickets), rng);
-        for (var id : List.of(PLAYER_1, PLAYER_2)) {
-            Collections.shuffle(tickets, rng);
-            var initialTickets = SortedBag.of(tickets.subList(0, 5));
-            var gameState1 = gameState.withInitiallyChosenTickets(id, initialTickets);
-            var drawn = SortedBag.of(tickets.subList(5, 8));
-            var chosen = SortedBag.of(tickets.subList(8, 9));
-            assertThrows(IllegalArgumentException.class, () -> {
-                gameState1.withChosenAdditionalTickets(drawn, chosen);
-            });
-        }
-    }
-
-    @Test
-    void gameStateWithChosenAdditionalTicketsWorks() {
-        var rng = TestRandomizer.newRandom();
-        var tickets = new ArrayList<>(new ChMap().ALL_TICKETS);
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            Collections.shuffle(tickets, rng);
-            var drawableTickets = SortedBag.of(tickets.subList(10, tickets.size()));
-            var gameState = GameState.initial(drawableTickets, rng);
-            var initialTickets1 = SortedBag.of(tickets.subList(0, 5));
-            var initialTickets2 = SortedBag.of(tickets.subList(5, 10));
-            gameState = gameState
-                    .withInitiallyChosenTickets(PLAYER_1, initialTickets1)
-                    .withInitiallyChosenTickets(PLAYER_2, initialTickets2);
-            var top3Tickets = gameState.topTickets(3);
-            var chosenTicketsCount = 1 + rng.nextInt(3);
-            var candidateTickets = new ArrayList<>(top3Tickets.toList());
-            Collections.shuffle(candidateTickets, rng);
-            var chosenTickets = SortedBag.of(candidateTickets.subList(0, chosenTicketsCount));
-            gameState = gameState.withChosenAdditionalTickets(top3Tickets, chosenTickets);
-
-            var expectedPlayerTickets = gameState.currentPlayerId() == PLAYER_1
-                    ? initialTickets1
-                    : initialTickets2;
-            expectedPlayerTickets = expectedPlayerTickets.union(chosenTickets);
-            assertEquals(expectedPlayerTickets, gameState.currentPlayerState().tickets());
-            assertEquals(drawableTickets.size() - 3, gameState.ticketsCount());
-        }
-    }
-
-    @Test
-    void gameStateWithDrawnFaceUpCardWorks() {
-        var rng = TestRandomizer.newRandom();
-        var allCards = allCards();
-        var playersToTest = EnumSet.of(PLAYER_1, PLAYER_2);
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var gameState = GameState.initial(SortedBag.of(), rng);
-
-            var drawableCardsCount = INITIAL_CARD_DECK_SIZE - 4;
-            for (int j = 0; j < drawableCardsCount; j++) {
-                var slot = j % 5;
-                gameState = gameState.withDrawnFaceUpCard(slot);
-            }
-            var finalGameState = gameState;
-            for (var slot : List.of(0, 1, 2, 3, 4)) {
-                assertThrows(IllegalArgumentException.class, () -> {
-                    finalGameState.withDrawnFaceUpCard(slot);
-                });
-            }
-            var allCardsB = new SortedBag.Builder<Card>();
-            for (var slot : List.of(0, 1, 2, 3, 4))
-                allCardsB.add(finalGameState.cardState().faceUpCard(slot));
-            for (int j = 0; j < 4; j++) {
-                allCardsB.add(gameState.topCard());
-                gameState = gameState.withoutTopCard();
-            }
-            allCardsB.add(finalGameState.playerState(PLAYER_1).cards());
-            allCardsB.add(finalGameState.playerState(PLAYER_2).cards());
-            assertEquals(allCards, allCardsB.build());
-
-            playersToTest.remove(gameState.currentPlayerId());
-            if (playersToTest.isEmpty()) break;
-        }
-        assertTrue(playersToTest.isEmpty());
-    }
-
-    @Test
-    void gameStateWithBlindlyDrawnCardWorks() {
-        var rng = TestRandomizer.newRandom();
-        var allCards = allCards();
-        var playersToTest = EnumSet.of(PLAYER_1, PLAYER_2);
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            var gameState = GameState.initial(SortedBag.of(), rng);
-
-            var drawableCardsCount = INITIAL_CARD_DECK_SIZE - 4;
-            for (int j = 0; j < drawableCardsCount; j++)
-                gameState = gameState.withBlindlyDrawnCard();
-            var finalGameState = gameState;
-            assertThrows(IllegalArgumentException.class, finalGameState::withBlindlyDrawnCard);
-            var allCardsB = new SortedBag.Builder<Card>();
-            for (var slot : List.of(0, 1, 2, 3, 4))
-                allCardsB.add(finalGameState.cardState().faceUpCard(slot));
-            for (int j = 0; j < 4; j++) {
-                allCardsB.add(gameState.topCard());
-                gameState = gameState.withoutTopCard();
-            }
-            allCardsB.add(finalGameState.playerState(PLAYER_1).cards());
-            allCardsB.add(finalGameState.playerState(PLAYER_2).cards());
-            assertEquals(allCards, allCardsB.build());
-
-            playersToTest.remove(gameState.currentPlayerId());
-            if (playersToTest.isEmpty()) break;
-        }
-        assertTrue(playersToTest.isEmpty());
-    }
-
-    @Test
-    void gameStateWithClaimedRouteWorks() {
-        var rng = TestRandomizer.newRandom();
-        var allRoutes = new ArrayList<>(new ChMap().ALL_ROUTES);
-        var playersToTest = EnumSet.of(PLAYER_1, PLAYER_2);
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            Collections.shuffle(allRoutes, rng);
-            var gameState = GameState.initial(SortedBag.of(), rng);
-
-            var drawableCardsCount = INITIAL_CARD_DECK_SIZE - 4;
-            for (int j = 0; j < drawableCardsCount; j++)
-                gameState = gameState.withBlindlyDrawnCard();
-
-            var discardedCardsCount = 0;
-            var allRoutes2 = new HashSet<>();
-            for (var route : allRoutes) {
-                if (gameState.currentPlayerState().canClaimRoute(route)) {
-                    var claimCards = gameState.currentPlayerState()
-                            .possibleClaimCards(route)
-                            .get(0);
-                    gameState = gameState.withClaimedRoute(route, claimCards);
-                    discardedCardsCount += claimCards.size();
-                } else {
-                    allRoutes2.add(route);
-                }
-            }
-
-            assertTrue(gameState.currentPlayerState().routes().size() >= 6);
-            assertEquals(discardedCardsCount, gameState.cardState().discardsSize());
-            allRoutes2.addAll(gameState.currentPlayerState().routes());
-            assertEquals(new HashSet<>(allRoutes), allRoutes2);
-
-            playersToTest.remove(gameState.currentPlayerId());
-            if (playersToTest.isEmpty()) break;
-        }
-        assertTrue(playersToTest.isEmpty());
-    }
-
-    @Test
-    void gameStateLastTurnBeginsWorks() {
-        var rng = TestRandomizer.newRandom();
-        var allRoutes = new ArrayList<>(new ChMap().ALL_ROUTES);
-        var playersToTest = EnumSet.of(PLAYER_1, PLAYER_2);
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            Collections.shuffle(allRoutes, rng);
-            var gameState = GameState.initial(SortedBag.of(), rng);
-
-            var drawableCardsCount = INITIAL_CARD_DECK_SIZE - 4;
-            for (int j = 0; j < drawableCardsCount; j++)
-                gameState = gameState.withBlindlyDrawnCard();
-
-            var remainingCarsCount = 40;
-            for (var route : allRoutes) {
-                if (gameState.currentPlayerState().canClaimRoute(route)) {
-                    var lastTurnShouldBegin =
-                            remainingCarsCount > 2
-                                    && remainingCarsCount - route.length() <= 2;
-                    var claimCards = gameState.currentPlayerState()
-                            .possibleClaimCards(route)
-                            .get(0);
-                    remainingCarsCount -= route.length();
-                    gameState = gameState.withClaimedRoute(route, claimCards);
-                    assertEquals(lastTurnShouldBegin, gameState.lastTurnBegins());
-                    if (lastTurnShouldBegin) break;
-                }
-            }
-
-            playersToTest.remove(gameState.currentPlayerId());
-            if (playersToTest.isEmpty()) break;
-        }
-        assertTrue(playersToTest.isEmpty());
-    }
-
-    @Test
-    void gameStateForNextTurnWorks() {
-        var rng = TestRandomizer.newRandom();
-        var allRoutes = new ArrayList<>(new ChMap().ALL_ROUTES);
-        var playersToTest = EnumSet.of(PLAYER_1, PLAYER_2);
-        for (int i = 0; i < TestRandomizer.RANDOM_ITERATIONS; i++) {
-            Collections.shuffle(allRoutes, rng);
-            var gameState = GameState.initial(SortedBag.of(), rng);
-            var testedPlayer = gameState.currentPlayerId();
-            var otherPlayer = testedPlayer.next();
-
-            var drawableCardsCount = INITIAL_CARD_DECK_SIZE - 4;
-            for (int j = 0; j < drawableCardsCount; j++) {
-                gameState = gameState.withBlindlyDrawnCard();
-                assertEquals(testedPlayer, gameState.currentPlayerId());
-                gameState = gameState.forNextTurn();
-                assertEquals(otherPlayer, gameState.currentPlayerId());
-                gameState = gameState.forNextTurn();
-            }
-
-            var remainingCarsCount = 40;
-            for (var route : allRoutes) {
-                if (gameState.currentPlayerState().canClaimRoute(route)) {
-                    var lastTurnShouldBegin =
-                            remainingCarsCount > 2
-                                    && remainingCarsCount - route.length() <= 2;
-                    var claimCards = gameState.currentPlayerState()
-                            .possibleClaimCards(route)
-                            .get(0);
-                    remainingCarsCount -= route.length();
-                    gameState = gameState.withClaimedRoute(route, claimCards);
-                    assertEquals(testedPlayer, gameState.currentPlayerId());
-                    gameState = gameState.forNextTurn();
-                    assertEquals(otherPlayer, gameState.currentPlayerId());
-                    gameState = gameState.forNextTurn();
-
-                    if (lastTurnShouldBegin) {
-                        assertEquals(testedPlayer, gameState.lastPlayer());
-                        break;
-                    }
-                }
-            }
-
-            playersToTest.remove(testedPlayer);
-            if (playersToTest.isEmpty()) break;
-        }
-        assertTrue(playersToTest.isEmpty());
-    }
-
-    private static SortedBag<Card> allCards() {
-        var cardsBuilder = new SortedBag.Builder<Card>();
-        cardsBuilder.add(14, Card.LOCOMOTIVE);
-        for (Card card : Card.CARS)
-            cardsBuilder.add(12, card);
-        return cardsBuilder.build();
-    }
-
-    private static final class ChMap {
-        //region Stations
-        final Station BAD = new Station(0, "Baden");
-        final Station BAL = new Station(1, "Bâle");
-        final Station BEL = new Station(2, "Bellinzone");
-        final Station BER = new Station(3, "Berne");
-        final Station BRI = new Station(4, "Brigue");
-        final Station BRU = new Station(5, "Brusio");
-        final Station COI = new Station(6, "Coire");
-        final Station DAV = new Station(7, "Davos");
-        final Station DEL = new Station(8, "Delémont");
-        final Station FRI = new Station(9, "Fribourg");
-        final Station GEN = new Station(10, "Genève");
-        final Station INT = new Station(11, "Interlaken");
-        final Station KRE = new Station(12, "Kreuzlingen");
-        final Station LAU = new Station(13, "Lausanne");
-        final Station LCF = new Station(14, "La Chaux-de-Fonds");
-        final Station LOC = new Station(15, "Locarno");
-        final Station LUC = new Station(16, "Lucerne");
-        final Station LUG = new Station(17, "Lugano");
-        final Station MAR = new Station(18, "Martigny");
-        final Station NEU = new Station(19, "Neuchâtel");
-        final Station OLT = new Station(20, "Olten");
-        final Station PFA = new Station(21, "Pfäffikon");
-        final Station SAR = new Station(22, "Sargans");
-        final Station SCE = new Station(23, "Schaffhouse");
-        final Station SCZ = new Station(24, "Schwyz");
-        final Station SIO = new Station(25, "Sion");
-        final Station SOL = new Station(26, "Soleure");
-        final Station STG = new Station(27, "Saint-Gall");
-        final Station VAD = new Station(28, "Vaduz");
-        final Station WAS = new Station(29, "Wassen");
-        final Station WIN = new Station(30, "Winterthour");
-        final Station YVE = new Station(31, "Yverdon");
-        final Station ZOU = new Station(32, "Zoug");
-        final Station ZUR = new Station(33, "Zürich");
-
-        final Station DE1 = new Station(34, "Allemagne");
-        final Station DE2 = new Station(35, "Allemagne");
-        final Station DE3 = new Station(36, "Allemagne");
-        final Station DE4 = new Station(37, "Allemagne");
-        final Station DE5 = new Station(38, "Allemagne");
-        final Station AT1 = new Station(39, "Autriche");
-        final Station AT2 = new Station(40, "Autriche");
-        final Station AT3 = new Station(41, "Autriche");
-        final Station IT1 = new Station(42, "Italie");
-        final Station IT2 = new Station(43, "Italie");
-        final Station IT3 = new Station(44, "Italie");
-        final Station IT4 = new Station(45, "Italie");
-        final Station IT5 = new Station(46, "Italie");
-        final Station FR1 = new Station(47, "France");
-        final Station FR2 = new Station(48, "France");
-        final Station FR3 = new Station(49, "France");
-        final Station FR4 = new Station(50, "France");
-
-        final List<Station> DE = List.of(DE1, DE2, DE3, DE4, DE5);
-        final List<Station> AT = List.of(AT1, AT2, AT3);
-        final List<Station> IT = List.of(IT1, IT2, IT3, IT4, IT5);
-        final List<Station> FR = List.of(FR1, FR2, FR3, FR4);
-
-        final List<Station> ALL_STATIONS = List.of(
-                BAD, BAL, BEL, BER, BRI, BRU, COI, DAV, DEL, FRI, GEN, INT, KRE, LAU, LCF, LOC, LUC,
-                LUG, MAR, NEU, OLT, PFA, SAR, SCE, SCZ, SIO, SOL, STG, VAD, WAS, WIN, YVE, ZOU, ZUR,
-                DE1, DE2, DE3, DE4, DE5, AT1, AT2, AT3, IT1, IT2, IT3, IT4, IT5, FR1, FR2, FR3, FR4);
-        //endregion
-
-        //region Routes
-        final Route AT1_STG_1 = new Route("AT1_STG_1", AT1, STG, 4, Route.Level.UNDERGROUND, null);
-        final Route AT2_VAD_1 = new Route("AT2_VAD_1", AT2, VAD, 1, Route.Level.UNDERGROUND, Color.RED);
-        final Route BAD_BAL_1 = new Route("BAD_BAL_1", BAD, BAL, 3, Route.Level.UNDERGROUND, Color.RED);
-        final Route BAD_OLT_1 = new Route("BAD_OLT_1", BAD, OLT, 2, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route BAD_ZUR_1 = new Route("BAD_ZUR_1", BAD, ZUR, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route BAL_DE1_1 = new Route("BAL_DE1_1", BAL, DE1, 1, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route BAL_DEL_1 = new Route("BAL_DEL_1", BAL, DEL, 2, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route BAL_OLT_1 = new Route("BAL_OLT_1", BAL, OLT, 2, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route BEL_LOC_1 = new Route("BEL_LOC_1", BEL, LOC, 1, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route BEL_LUG_1 = new Route("BEL_LUG_1", BEL, LUG, 1, Route.Level.UNDERGROUND, Color.RED);
-        final Route BEL_LUG_2 = new Route("BEL_LUG_2", BEL, LUG, 1, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route BEL_WAS_1 = new Route("BEL_WAS_1", BEL, WAS, 4, Route.Level.UNDERGROUND, null);
-        final Route BEL_WAS_2 = new Route("BEL_WAS_2", BEL, WAS, 4, Route.Level.UNDERGROUND, null);
-        final Route BER_FRI_1 = new Route("BER_FRI_1", BER, FRI, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route BER_FRI_2 = new Route("BER_FRI_2", BER, FRI, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route BER_INT_1 = new Route("BER_INT_1", BER, INT, 3, Route.Level.OVERGROUND, Color.BLUE);
-        final Route BER_LUC_1 = new Route("BER_LUC_1", BER, LUC, 4, Route.Level.OVERGROUND, null);
-        final Route BER_LUC_2 = new Route("BER_LUC_2", BER, LUC, 4, Route.Level.OVERGROUND, null);
-        final Route BER_NEU_1 = new Route("BER_NEU_1", BER, NEU, 2, Route.Level.OVERGROUND, Color.RED);
-        final Route BER_SOL_1 = new Route("BER_SOL_1", BER, SOL, 2, Route.Level.OVERGROUND, Color.BLACK);
-        final Route BRI_INT_1 = new Route("BRI_INT_1", BRI, INT, 2, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route BRI_IT5_1 = new Route("BRI_IT5_1", BRI, IT5, 3, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route BRI_LOC_1 = new Route("BRI_LOC_1", BRI, LOC, 6, Route.Level.UNDERGROUND, null);
-        final Route BRI_SIO_1 = new Route("BRI_SIO_1", BRI, SIO, 3, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route BRI_WAS_1 = new Route("BRI_WAS_1", BRI, WAS, 4, Route.Level.UNDERGROUND, Color.RED);
-        final Route BRU_COI_1 = new Route("BRU_COI_1", BRU, COI, 5, Route.Level.UNDERGROUND, null);
-        final Route BRU_DAV_1 = new Route("BRU_DAV_1", BRU, DAV, 4, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route BRU_IT2_1 = new Route("BRU_IT2_1", BRU, IT2, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route COI_DAV_1 = new Route("COI_DAV_1", COI, DAV, 2, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route COI_SAR_1 = new Route("COI_SAR_1", COI, SAR, 1, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route COI_WAS_1 = new Route("COI_WAS_1", COI, WAS, 5, Route.Level.UNDERGROUND, null);
-        final Route DAV_AT3_1 = new Route("DAV_AT3_1", DAV, AT3, 3, Route.Level.UNDERGROUND, null);
-        final Route DAV_IT1_1 = new Route("DAV_IT1_1", DAV, IT1, 3, Route.Level.UNDERGROUND, null);
-        final Route DAV_SAR_1 = new Route("DAV_SAR_1", DAV, SAR, 3, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route DE2_SCE_1 = new Route("DE2_SCE_1", DE2, SCE, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route DE3_KRE_1 = new Route("DE3_KRE_1", DE3, KRE, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route DE4_KRE_1 = new Route("DE4_KRE_1", DE4, KRE, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route DE5_STG_1 = new Route("DE5_STG_1", DE5, STG, 2, Route.Level.OVERGROUND, null);
-        final Route DEL_FR4_1 = new Route("DEL_FR4_1", DEL, FR4, 2, Route.Level.UNDERGROUND, Color.BLACK);
-        final Route DEL_LCF_1 = new Route("DEL_LCF_1", DEL, LCF, 3, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route DEL_SOL_1 = new Route("DEL_SOL_1", DEL, SOL, 1, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route FR1_MAR_1 = new Route("FR1_MAR_1", FR1, MAR, 2, Route.Level.UNDERGROUND, null);
-        final Route FR2_GEN_1 = new Route("FR2_GEN_1", FR2, GEN, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route FR3_LCF_1 = new Route("FR3_LCF_1", FR3, LCF, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route FRI_LAU_1 = new Route("FRI_LAU_1", FRI, LAU, 3, Route.Level.OVERGROUND, Color.RED);
-        final Route FRI_LAU_2 = new Route("FRI_LAU_2", FRI, LAU, 3, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route GEN_LAU_1 = new Route("GEN_LAU_1", GEN, LAU, 4, Route.Level.OVERGROUND, Color.BLUE);
-        final Route GEN_LAU_2 = new Route("GEN_LAU_2", GEN, LAU, 4, Route.Level.OVERGROUND, Color.WHITE);
-        final Route GEN_YVE_1 = new Route("GEN_YVE_1", GEN, YVE, 6, Route.Level.OVERGROUND, null);
-        final Route INT_LUC_1 = new Route("INT_LUC_1", INT, LUC, 4, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route IT3_LUG_1 = new Route("IT3_LUG_1", IT3, LUG, 2, Route.Level.UNDERGROUND, Color.WHITE);
-        final Route IT4_LOC_1 = new Route("IT4_LOC_1", IT4, LOC, 2, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route KRE_SCE_1 = new Route("KRE_SCE_1", KRE, SCE, 3, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route KRE_STG_1 = new Route("KRE_STG_1", KRE, STG, 1, Route.Level.OVERGROUND, Color.GREEN);
-        final Route KRE_WIN_1 = new Route("KRE_WIN_1", KRE, WIN, 2, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route LAU_MAR_1 = new Route("LAU_MAR_1", LAU, MAR, 4, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route LAU_NEU_1 = new Route("LAU_NEU_1", LAU, NEU, 4, Route.Level.OVERGROUND, null);
-        final Route LCF_NEU_1 = new Route("LCF_NEU_1", LCF, NEU, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route LCF_YVE_1 = new Route("LCF_YVE_1", LCF, YVE, 3, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route LOC_LUG_1 = new Route("LOC_LUG_1", LOC, LUG, 1, Route.Level.UNDERGROUND, Color.VIOLET);
-        final Route LUC_OLT_1 = new Route("LUC_OLT_1", LUC, OLT, 3, Route.Level.OVERGROUND, Color.GREEN);
-        final Route LUC_SCZ_1 = new Route("LUC_SCZ_1", LUC, SCZ, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route LUC_ZOU_1 = new Route("LUC_ZOU_1", LUC, ZOU, 1, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route LUC_ZOU_2 = new Route("LUC_ZOU_2", LUC, ZOU, 1, Route.Level.OVERGROUND, Color.YELLOW);
-        final Route MAR_SIO_1 = new Route("MAR_SIO_1", MAR, SIO, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route NEU_SOL_1 = new Route("NEU_SOL_1", NEU, SOL, 4, Route.Level.OVERGROUND, Color.GREEN);
-        final Route NEU_YVE_1 = new Route("NEU_YVE_1", NEU, YVE, 2, Route.Level.OVERGROUND, Color.BLACK);
-        final Route OLT_SOL_1 = new Route("OLT_SOL_1", OLT, SOL, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route OLT_ZUR_1 = new Route("OLT_ZUR_1", OLT, ZUR, 3, Route.Level.OVERGROUND, Color.WHITE);
-        final Route PFA_SAR_1 = new Route("PFA_SAR_1", PFA, SAR, 3, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route PFA_SCZ_1 = new Route("PFA_SCZ_1", PFA, SCZ, 1, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route PFA_STG_1 = new Route("PFA_STG_1", PFA, STG, 3, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route PFA_ZUR_1 = new Route("PFA_ZUR_1", PFA, ZUR, 2, Route.Level.OVERGROUND, Color.BLUE);
-        final Route SAR_VAD_1 = new Route("SAR_VAD_1", SAR, VAD, 1, Route.Level.UNDERGROUND, Color.ORANGE);
-        final Route SCE_WIN_1 = new Route("SCE_WIN_1", SCE, WIN, 1, Route.Level.OVERGROUND, Color.BLACK);
-        final Route SCE_WIN_2 = new Route("SCE_WIN_2", SCE, WIN, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route SCE_ZUR_1 = new Route("SCE_ZUR_1", SCE, ZUR, 3, Route.Level.OVERGROUND, Color.ORANGE);
-        final Route SCZ_WAS_1 = new Route("SCZ_WAS_1", SCZ, WAS, 2, Route.Level.UNDERGROUND, Color.GREEN);
-        final Route SCZ_WAS_2 = new Route("SCZ_WAS_2", SCZ, WAS, 2, Route.Level.UNDERGROUND, Color.YELLOW);
-        final Route SCZ_ZOU_1 = new Route("SCZ_ZOU_1", SCZ, ZOU, 1, Route.Level.OVERGROUND, Color.BLACK);
-        final Route SCZ_ZOU_2 = new Route("SCZ_ZOU_2", SCZ, ZOU, 1, Route.Level.OVERGROUND, Color.WHITE);
-        final Route STG_VAD_1 = new Route("STG_VAD_1", STG, VAD, 2, Route.Level.UNDERGROUND, Color.BLUE);
-        final Route STG_WIN_1 = new Route("STG_WIN_1", STG, WIN, 3, Route.Level.OVERGROUND, Color.RED);
-        final Route STG_ZUR_1 = new Route("STG_ZUR_1", STG, ZUR, 4, Route.Level.OVERGROUND, Color.BLACK);
-        final Route WIN_ZUR_1 = new Route("WIN_ZUR_1", WIN, ZUR, 1, Route.Level.OVERGROUND, Color.BLUE);
-        final Route WIN_ZUR_2 = new Route("WIN_ZUR_2", WIN, ZUR, 1, Route.Level.OVERGROUND, Color.VIOLET);
-        final Route ZOU_ZUR_1 = new Route("ZOU_ZUR_1", ZOU, ZUR, 1, Route.Level.OVERGROUND, Color.GREEN);
-        final Route ZOU_ZUR_2 = new Route("ZOU_ZUR_2", ZOU, ZUR, 1, Route.Level.OVERGROUND, Color.RED);
-        final List<Route> ALL_ROUTES = List.of(
-                AT1_STG_1, AT2_VAD_1, BAD_BAL_1, BAD_OLT_1, BAD_ZUR_1, BAL_DE1_1,
-                BAL_DEL_1, BAL_OLT_1, BEL_LOC_1, BEL_LUG_1, BEL_LUG_2, BEL_WAS_1,
-                BEL_WAS_2, BER_FRI_1, BER_FRI_2, BER_INT_1, BER_LUC_1, BER_LUC_2,
-                BER_NEU_1, BER_SOL_1, BRI_INT_1, BRI_IT5_1, BRI_LOC_1, BRI_SIO_1,
-                BRI_WAS_1, BRU_COI_1, BRU_DAV_1, BRU_IT2_1, COI_DAV_1, COI_SAR_1,
-                COI_WAS_1, DAV_AT3_1, DAV_IT1_1, DAV_SAR_1, DE2_SCE_1, DE3_KRE_1,
-                DE4_KRE_1, DE5_STG_1, DEL_FR4_1, DEL_LCF_1, DEL_SOL_1, FR1_MAR_1,
-                FR2_GEN_1, FR3_LCF_1, FRI_LAU_1, FRI_LAU_2, GEN_LAU_1, GEN_LAU_2,
-                GEN_YVE_1, INT_LUC_1, IT3_LUG_1, IT4_LOC_1, KRE_SCE_1, KRE_STG_1,
-                KRE_WIN_1, LAU_MAR_1, LAU_NEU_1, LCF_NEU_1, LCF_YVE_1, LOC_LUG_1,
-                LUC_OLT_1, LUC_SCZ_1, LUC_ZOU_1, LUC_ZOU_2, MAR_SIO_1, NEU_SOL_1,
-                NEU_YVE_1, OLT_SOL_1, OLT_ZUR_1, PFA_SAR_1, PFA_SCZ_1, PFA_STG_1,
-                PFA_ZUR_1, SAR_VAD_1, SCE_WIN_1, SCE_WIN_2, SCE_ZUR_1, SCZ_WAS_1,
-                SCZ_WAS_2, SCZ_ZOU_1, SCZ_ZOU_2, STG_VAD_1, STG_WIN_1, STG_ZUR_1,
-                WIN_ZUR_1, WIN_ZUR_2, ZOU_ZUR_1, ZOU_ZUR_2);
-        //endregion
-
-        //region Tickets
-        final Ticket BAL_BER = new Ticket(BAL, BER, 5);
-        final Ticket BAL_BRI = new Ticket(BAL, BRI, 10);
-        final Ticket BAL_STG = new Ticket(BAL, STG, 8);
-        final Ticket BER_COI = new Ticket(BER, COI, 10);
-        final Ticket BER_LUG = new Ticket(BER, LUG, 12);
-        final Ticket BER_SCZ = new Ticket(BER, SCZ, 5);
-        final Ticket BER_ZUR = new Ticket(BER, ZUR, 6);
-        final Ticket FRI_LUC = new Ticket(FRI, LUC, 5);
-        final Ticket GEN_BAL = new Ticket(GEN, BAL, 13);
-        final Ticket GEN_BER = new Ticket(GEN, BER, 8);
-        final Ticket GEN_SIO = new Ticket(GEN, SIO, 10);
-        final Ticket GEN_ZUR = new Ticket(GEN, ZUR, 14);
-        final Ticket INT_WIN = new Ticket(INT, WIN, 7);
-        final Ticket KRE_ZUR = new Ticket(KRE, ZUR, 3);
-        final Ticket LAU_INT = new Ticket(LAU, INT, 7);
-        final Ticket LAU_LUC = new Ticket(LAU, LUC, 8);
-        final Ticket LAU_STG = new Ticket(LAU, STG, 13);
-        final Ticket LCF_BER = new Ticket(LCF, BER, 3);
-        final Ticket LCF_LUC = new Ticket(LCF, LUC, 7);
-        final Ticket LCF_ZUR = new Ticket(LCF, ZUR, 8);
-        final Ticket LUC_VAD = new Ticket(LUC, VAD, 6);
-        final Ticket LUC_ZUR = new Ticket(LUC, ZUR, 2);
-        final Ticket LUG_COI = new Ticket(LUG, COI, 10);
-        final Ticket NEU_WIN = new Ticket(NEU, WIN, 9);
-        final Ticket OLT_SCE = new Ticket(OLT, SCE, 5);
-        final Ticket SCE_MAR = new Ticket(SCE, MAR, 15);
-        final Ticket SCE_STG = new Ticket(SCE, STG, 4);
-        final Ticket SCE_ZOU = new Ticket(SCE, ZOU, 3);
-        final Ticket STG_BRU = new Ticket(STG, BRU, 9);
-        final Ticket WIN_SCZ = new Ticket(WIN, SCZ, 3);
-        final Ticket ZUR_BAL = new Ticket(ZUR, BAL, 4);
-        final Ticket ZUR_BRU = new Ticket(ZUR, BRU, 11);
-        final Ticket ZUR_LUG = new Ticket(ZUR, LUG, 9);
-        final Ticket ZUR_VAD = new Ticket(ZUR, VAD, 6);
-
-        final Ticket BER_C = ticketToNeighbors(List.of(BER), 6, 11, 8, 5);
-        final Ticket COI_C = ticketToNeighbors(List.of(COI), 6, 3, 5, 12);
-        final Ticket LUG_C = ticketToNeighbors(List.of(LUG), 12, 13, 2, 14);
-        final Ticket ZUR_C = ticketToNeighbors(List.of(ZUR), 3, 7, 11, 7);
-
-        final Ticket DE_C = ticketToNeighbors(DE, 0, 5, 13, 5);
-        final Ticket AT_C = ticketToNeighbors(AT, 5, 0, 6, 14);
-        final Ticket IT_C = ticketToNeighbors(IT, 13, 6, 0, 11);
-        final Ticket FR_C = ticketToNeighbors(FR, 5, 14, 11, 0);
-
-        final List<Ticket> ALL_TICKETS = List.of(
-                BAL_BER, BAL_BRI, BAL_STG, BER_COI, BER_LUG, BER_SCZ,
-                BER_ZUR, FRI_LUC, GEN_BAL, GEN_BER, GEN_SIO, GEN_ZUR,
-                INT_WIN, KRE_ZUR, LAU_INT, LAU_LUC, LAU_STG, LCF_BER,
-                LCF_LUC, LCF_ZUR, LUC_VAD, LUC_ZUR, LUG_COI, NEU_WIN,
-                OLT_SCE, SCE_MAR, SCE_STG, SCE_ZOU, STG_BRU, WIN_SCZ,
-                ZUR_BAL, ZUR_BRU, ZUR_LUG, ZUR_VAD,
-                BER_C, COI_C, LUG_C, ZUR_C,
-                DE_C, DE_C, AT_C, AT_C, IT_C, IT_C, FR_C, FR_C);
-
-        private Ticket ticketToNeighbors(List<Station> from, int de, int at, int it, int fr) {
-            var trips = new ArrayList<Trip>();
-            if (de != 0) trips.addAll(Trip.all(from, DE, de));
-            if (at != 0) trips.addAll(Trip.all(from, AT, at));
-            if (it != 0) trips.addAll(Trip.all(from, IT, it));
-            if (fr != 0) trips.addAll(Trip.all(from, FR, fr));
-            return new Ticket(trips);
-        }
-        //endregion
-    }
-}
\ No newline at end of file
Index: testProf/ch/epfl/tchu/game/RouteTestProf.java
===================================================================
diff --git a/testProf/ch/epfl/tchu/game/RouteTestProf.java b/testProf/ch/epfl/tchu/game/RouteTestProf.java
deleted file mode 100644
--- a/testProf/ch/epfl/tchu/game/RouteTestProf.java	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ /dev/null	(revision e021d792421af3bddadea19f3467f1075336a444)
@@ -1,386 +0,0 @@
-package ch.epfl.tchu.game;
-
-import ch.epfl.tchu.SortedBag;
-import ch.epfl.tchu.game.Route.Level;
-import ch.epfl.test.TestRandomizer;
-import org.junit.jupiter.api.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class RouteTestProf {
-    private static final List<Color> COLORS =
-            List.of(
-                    Color.BLACK,
-                    Color.VIOLET,
-                    Color.BLUE,
-                    Color.GREEN,
-                    Color.YELLOW,
-                    Color.ORANGE,
-                    Color.RED,
-                    Color.WHITE);
-    private static final List<Card> CAR_CARDS =
-            List.of(
-                    Card.BLACK,
-                    Card.VIOLET,
-                    Card.BLUE,
-                    Card.GREEN,
-                    Card.YELLOW,
-                    Card.ORANGE,
-                    Card.RED,
-                    Card.WHITE);
-
-    @Test
-    void routeConstructorFailsWhenBothStationsAreEqual() {
-        var s = new Station(0, "Lausanne");
-        assertThrows(IllegalArgumentException.class, () -> {
-            new Route("id", s, s, 1, Level.OVERGROUND, Color.BLACK);
-        });
-    }
-
-    @Test
-    void routeConstructorFailsWhenLengthIsInvalid() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        assertThrows(IllegalArgumentException.class, () -> {
-            new Route("id", s1, s2, 0, Level.OVERGROUND, Color.BLACK);
-        });
-        assertThrows(IllegalArgumentException.class, () -> {
-            new Route("id", s1, s2, 7, Level.OVERGROUND, Color.BLACK);
-        });
-    }
-
-    @Test
-    void routeConstructorFailsWhenIdIsNull() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        assertThrows(NullPointerException.class, () -> {
-            new Route(null, s1, s2, 1, Level.OVERGROUND, Color.BLACK);
-        });
-    }
-
-    @Test
-    void routeConstructorFailsWhenOneStationIsNull() {
-        var s = new Station(0, "EPFL");
-        assertThrows(NullPointerException.class, () -> {
-            new Route("id", null, s, 1, Level.OVERGROUND, Color.BLACK);
-        });
-        assertThrows(NullPointerException.class, () -> {
-            new Route("id", s, null, 1, Level.OVERGROUND, Color.BLACK);
-        });
-    }
-
-    @Test
-    void routeConstructorFailsWhenLevelIsNull() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        assertThrows(NullPointerException.class, () -> {
-            new Route("id", s1, s2, 1, null, Color.BLACK);
-        });
-    }
-
-    @Test
-    void routeIdReturnsId() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var routes = new Route[100];
-        for (int i = 0; i < routes.length; i++)
-            routes[i] = new Route("id" + i, s1, s2, 1, Level.OVERGROUND, Color.BLACK);
-        for (int i = 0; i < routes.length; i++)
-            assertEquals("id" + i, routes[i].id());
-    }
-
-    @Test
-    void routeStation1And2ReturnStation1And2() {
-        var rng = TestRandomizer.newRandom();
-        var stations = new Station[100];
-        for (int i = 0; i < stations.length; i++)
-            stations[i] = new Station(i, "Station " + i);
-        var routes = new Route[100];
-        for (int i = 0; i < stations.length; i++) {
-            var s1 = stations[i];
-            var s2 = stations[(i + 1) % 100];
-            var l = 1 + rng.nextInt(6);
-            routes[i] = new Route("r" + i, s1, s2, l, Level.OVERGROUND, Color.RED);
-        }
-        for (int i = 0; i < stations.length; i++) {
-            var s1 = stations[i];
-            var s2 = stations[(i + 1) % 100];
-            var r = routes[i];
-            assertEquals(s1, r.station1());
-            assertEquals(s2, r.station2());
-        }
-    }
-
-    @Test
-    void routeLengthReturnsLength() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-        var routes = new Route[6];
-        for (var l = 1; l <= 6; l++)
-            routes[l - 1] = new Route(id, s1, s2, l, Level.OVERGROUND, Color.BLACK);
-        for (var l = 1; l <= 6; l++)
-            assertEquals(l, routes[l - 1].length());
-
-    }
-
-    @Test
-    void routeLevelReturnsLevel() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-        var ro = new Route(id, s1, s2, 1, Level.OVERGROUND, Color.BLACK);
-        var ru = new Route(id, s1, s2, 1, Level.UNDERGROUND, Color.BLACK);
-        assertEquals(Level.OVERGROUND, ro.level());
-        assertEquals(Level.UNDERGROUND, ru.level());
-    }
-
-    @Test
-    void routeColorReturnsColor() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-        var routes = new Route[8];
-        for (var c : COLORS)
-            routes[c.ordinal()] = new Route(id, s1, s2, 1, Level.OVERGROUND, c);
-        for (var c : COLORS)
-            assertEquals(c, routes[c.ordinal()].color());
-        var r = new Route(id, s1, s2, 1, Level.OVERGROUND, null);
-        assertNull(r.color());
-    }
-
-    @Test
-    void routeStationsReturnsStations() {
-        var rng = TestRandomizer.newRandom();
-        var stations = new Station[100];
-        for (int i = 0; i < stations.length; i++)
-            stations[i] = new Station(i, "Station " + i);
-        var routes = new Route[100];
-        for (int i = 0; i < stations.length; i++) {
-            var s1 = stations[i];
-            var s2 = stations[(i + 1) % 100];
-            var l = 1 + rng.nextInt(6);
-            routes[i] = new Route("r" + i, s1, s2, l, Level.OVERGROUND, Color.RED);
-        }
-        for (int i = 0; i < stations.length; i++) {
-            var s1 = stations[i];
-            var s2 = stations[(i + 1) % 100];
-            assertEquals(List.of(s1, s2), routes[i].stations());
-        }
-    }
-
-    @Test
-    void routeStationOppositeFailsWithInvalidStation() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var s3 = new Station(1, "EPFL");
-        var r = new Route("id", s1, s2, 1, Level.OVERGROUND, Color.RED);
-        assertThrows(IllegalArgumentException.class, () -> {
-            r.stationOpposite(s3);
-        });
-    }
-
-    @Test
-    void routeStationOppositeReturnsOppositeStation() {
-        var rng = TestRandomizer.newRandom();
-        var stations = new Station[100];
-        for (int i = 0; i < stations.length; i++)
-            stations[i] = new Station(i, "Station " + i);
-        var routes = new Route[100];
-        for (int i = 0; i < stations.length; i++) {
-            var s1 = stations[i];
-            var s2 = stations[(i + 1) % 100];
-            var l = 1 + rng.nextInt(6);
-            routes[i] = new Route("r" + i, s1, s2, l, Level.OVERGROUND, Color.RED);
-        }
-        for (int i = 0; i < stations.length; i++) {
-            var s1 = stations[i];
-            var s2 = stations[(i + 1) % 100];
-            var r = routes[i];
-            assertEquals(s1, r.stationOpposite(s2));
-            assertEquals(s2, r.stationOpposite(s1));
-        }
-    }
-
-    @Test
-    void routePossibleClaimCardsWorksForOvergroundColoredRoute() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-        for (var i = 0; i < COLORS.size(); i++) {
-            var color = COLORS.get(i);
-            var card = CAR_CARDS.get(i);
-            for (var l = 1; l <= 6; l++) {
-                var r = new Route(id, s1, s2, l, Level.OVERGROUND, color);
-                assertEquals(List.of(SortedBag.of(l, card)), r.possibleClaimCards());
-            }
-        }
-    }
-
-    @Test
-    void routePossibleClaimCardsWorksOnOvergroundNeutralRoute() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-        for (var l = 1; l <= 6; l++) {
-            var r = new Route(id, s1, s2, l, Level.OVERGROUND, null);
-            var expected = List.of(
-                    SortedBag.of(l, Card.BLACK),
-                    SortedBag.of(l, Card.VIOLET),
-                    SortedBag.of(l, Card.BLUE),
-                    SortedBag.of(l, Card.GREEN),
-                    SortedBag.of(l, Card.YELLOW),
-                    SortedBag.of(l, Card.ORANGE),
-                    SortedBag.of(l, Card.RED),
-                    SortedBag.of(l, Card.WHITE));
-            assertEquals(expected, r.possibleClaimCards());
-        }
-    }
-
-    @Test
-    void routePossibleClaimCardsWorksOnUndergroundColoredRoute() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-        for (var i = 0; i < COLORS.size(); i++) {
-            var color = COLORS.get(i);
-            var card = CAR_CARDS.get(i);
-            for (var l = 1; l <= 6; l++) {
-                var r = new Route(id, s1, s2, l, Level.UNDERGROUND, color);
-
-                var expected = new ArrayList<SortedBag<Card>>();
-                for (var locomotives = 0; locomotives <= l; locomotives++) {
-                    var cars = l - locomotives;
-                    expected.add(SortedBag.of(cars, card, locomotives, Card.LOCOMOTIVE));
-                }
-                assertEquals(expected, r.possibleClaimCards());
-            }
-        }
-    }
-
-    @Test
-    void routePossibleClaimCardsWorksOnUndergroundNeutralRoute() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-        for (var l = 1; l <= 6; l++) {
-            var r = new Route(id, s1, s2, l, Level.UNDERGROUND, null);
-
-            var expected = new ArrayList<SortedBag<Card>>();
-            for (var locomotives = 0; locomotives <= l; locomotives++) {
-                var cars = l - locomotives;
-                if (cars == 0)
-                    expected.add(SortedBag.of(locomotives, Card.LOCOMOTIVE));
-                else {
-                    for (var card : CAR_CARDS)
-                        expected.add(SortedBag.of(cars, card, locomotives, Card.LOCOMOTIVE));
-                }
-            }
-            assertEquals(expected, r.possibleClaimCards());
-        }
-    }
-
-    @Test
-    void routeAdditionalClaimCardsCountWorksWithColoredCardsOnly() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-
-        for (var l = 1; l <= 6; l++) {
-            for (var color : COLORS) {
-                var matchingCard = CAR_CARDS.get(color.ordinal());
-                var nonMatchingCard = color == Color.BLACK
-                        ? Card.WHITE
-                        : Card.BLACK;
-                var claimCards = SortedBag.of(l, matchingCard);
-                var r = new Route(id, s1, s2, l, Level.UNDERGROUND, color);
-                for (var m = 0; m <= 3; m++) {
-                    for (var locomotives = 0; locomotives <= m; locomotives++) {
-                        var drawnB = new SortedBag.Builder<Card>();
-                        drawnB.add(locomotives, Card.LOCOMOTIVE);
-                        drawnB.add(m - locomotives, matchingCard);
-                        drawnB.add(3 - m, nonMatchingCard);
-                        var drawn = drawnB.build();
-                        assertEquals(m, r.additionalClaimCardsCount(claimCards, drawn));
-                    }
-                }
-            }
-        }
-    }
-
-    @Test
-    void routeAdditionalClaimCardsCountWorksWithLocomotivesOnly() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-
-        for (var l = 1; l <= 6; l++) {
-            for (var color : COLORS) {
-                var matchingCard = CAR_CARDS.get(color.ordinal());
-                var nonMatchingCard = color == Color.BLACK
-                        ? Card.WHITE
-                        : Card.BLACK;
-                var claimCards = SortedBag.of(l, Card.LOCOMOTIVE);
-                var r = new Route(id, s1, s2, l, Level.UNDERGROUND, color);
-                for (var m = 0; m <= 3; m++) {
-                    for (var locomotives = 0; locomotives <= m; locomotives++) {
-                        var drawnB = new SortedBag.Builder<Card>();
-                        drawnB.add(locomotives, Card.LOCOMOTIVE);
-                        drawnB.add(m - locomotives, matchingCard);
-                        drawnB.add(3 - m, nonMatchingCard);
-                        var drawn = drawnB.build();
-                        assertEquals(locomotives, r.additionalClaimCardsCount(claimCards, drawn));
-                    }
-                }
-            }
-        }
-    }
-
-    @Test
-    void routeAdditionalClaimCardsCountWorksWithMixedCards() {
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-
-        for (var l = 2; l <= 6; l++) {
-            for (var color : COLORS) {
-                var matchingCard = CAR_CARDS.get(color.ordinal());
-                var nonMatchingCard = color == Color.BLACK
-                        ? Card.WHITE
-                        : Card.BLACK;
-                for (var claimLoc = 1; claimLoc < l; claimLoc++) {
-                    var claimCards = SortedBag.of(
-                            l - claimLoc, matchingCard,
-                            claimLoc, Card.LOCOMOTIVE);
-                    var r = new Route(id, s1, s2, l, Level.UNDERGROUND, color);
-                    for (var m = 0; m <= 3; m++) {
-                        for (var locomotives = 0; locomotives <= m; locomotives++) {
-                            var drawnB = new SortedBag.Builder<Card>();
-                            drawnB.add(locomotives, Card.LOCOMOTIVE);
-                            drawnB.add(m - locomotives, matchingCard);
-                            drawnB.add(3 - m, nonMatchingCard);
-                            var drawn = drawnB.build();
-                            assertEquals(m, r.additionalClaimCardsCount(claimCards, drawn));
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    @Test
-    void routeClaimPointsReturnsClaimPoints() {
-        var expectedClaimPoints =
-                List.of(Integer.MIN_VALUE, 1, 2, 4, 7, 10, 15);
-        var s1 = new Station(0, "Lausanne");
-        var s2 = new Station(1, "EPFL");
-        var id = "id";
-        for (var l = 1; l <= 6; l++) {
-            var r = new Route(id, s1, s2, l, Level.OVERGROUND, Color.BLACK);
-            assertEquals(expectedClaimPoints.get(l), r.claimPoints());
-        }
-    }
-}
\ No newline at end of file
Index: tChu.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/test\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/testProf\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/resources\" type=\"java-resource\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/res\" type=\"java-resource\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" name=\"org.junit.jupiter:junit-jupiter:5.7.0\" level=\"project\" />\r\n    <orderEntry type=\"module-library\">\r\n      <library name=\"JUnit5.4\">\r\n        <CLASSES>\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"module-library\">\r\n      <library name=\"JUnit5.4\">\r\n        <CLASSES>\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.4.2/junit-jupiter-5.4.2.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.4.2/junit-jupiter-api-5.4.2.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.4.2/junit-platform-commons-1.4.2.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.4.2/junit-jupiter-params-5.4.2.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.4.2/junit-jupiter-engine-5.4.2.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.4.2/junit-platform-engine-1.4.2.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"library\" name=\"JavaFX\" level=\"application\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tChu.iml b/tChu.iml
--- a/tChu.iml	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ b/tChu.iml	(date 1621261123294)
@@ -5,45 +5,13 @@
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/test" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/testProf" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/testProf" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/res" type="java-resource" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" name="org.junit.jupiter:junit-jupiter:5.7.0" level="project" />
-    <orderEntry type="module-library">
-      <library name="JUnit5.4">
-        <CLASSES>
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library">
-      <library name="JUnit5.4">
-        <CLASSES>
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.4.2/junit-jupiter-5.4.2.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.4.2/junit-jupiter-api-5.4.2.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.4.2/junit-platform-commons-1.4.2.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.4.2/junit-jupiter-params-5.4.2.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.4.2/junit-jupiter-engine-5.4.2.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.4.2/junit-platform-engine-1.4.2.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="library" name="JavaFX" level="application" />
+    <orderEntry type="library" name="lib" level="project" />
+    <orderEntry type="library" name="lib" level="project" />
+    <orderEntry type="library" name="javaFX.base" level="application" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"adopt-openj9-11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision e021d792421af3bddadea19f3467f1075336a444)
+++ b/.idea/misc.xml	(date 1621260676022)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="adopt-openj9-11" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="adopt-openj9-11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/libraries/projet_cs108.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/projet_cs108.xml b/.idea/libraries/projet_cs108.xml
new file mode 100644
--- /dev/null	(date 1621260676039)
+++ b/.idea/libraries/projet_cs108.xml	(date 1621260676039)
@@ -0,0 +1,9 @@
+<component name="libraryTable">
+  <library name="projet-cs108">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/out/artifacts/rendu/projet-cs108.zip!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/lib.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/lib.xml b/.idea/libraries/lib.xml
new file mode 100644
--- /dev/null	(date 1621260676013)
+++ b/.idea/libraries/lib.xml	(date 1621260676013)
@@ -0,0 +1,16 @@
+<component name="libraryTable">
+  <library name="lib">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/lib/apiguardian-api-1.1.0.jar!/" />
+      <root url="jar://$PROJECT_DIR$/lib/junit-jupiter-params-5.7.0.jar!/" />
+      <root url="jar://$PROJECT_DIR$/lib/junit-jupiter-api-5.7.0.jar!/" />
+      <root url="jar://$PROJECT_DIR$/lib/junit-platform-engine-1.7.0.jar!/" />
+      <root url="jar://$PROJECT_DIR$/lib/junit-jupiter-5.7.0.jar!/" />
+      <root url="jar://$PROJECT_DIR$/lib/junit-jupiter-engine-5.7.0.jar!/" />
+      <root url="jar://$PROJECT_DIR$/lib/junit-platform-commons-1.7.0.jar!/" />
+      <root url="jar://$PROJECT_DIR$/lib/opentest4j-1.2.0.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
